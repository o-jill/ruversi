use super::*;

pub const SENTE : i8 = 1;
pub const BLANK : i8 = 0;
pub const GOTE : i8 = -1;
pub const NONE : i8 = 127;
pub const NUMCELL : usize = 8;
pub const CELL_2D : usize = NUMCELL * NUMCELL;
pub const STR_SENTE : &str = "0ABCDEFGH";
pub const STR_GOTE : &str = "0abcdefgh";
const STR_NUM : &str = "012345678";
pub const STONE_SENTE : &str = "@@";
pub const STONE_GOTE : &str = "[]";
pub const LSB_CELL : u64 = 0x0000000000000001;
const LT_CELL : u64 = LSB_CELL;
const RT_CELL : u64 = 0x0000000000000080;
const LB_CELL : u64 = 0x0100000000000000;
const RB_CELL : u64 = 0x8000000000000000;
const CORNER_CELL : u64 = 0x8100000000000081;
const BITPTN : [u64 ; 9] = [
    0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff,
];
const TBLCHKREV : [i8 ; 16130] = [
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,
0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,
0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
];

const TBL_SURROUND : [u64 ; 64] = [
    // y0
    0x0302u64, 0x0705u64, 0x0705u64 << 1, 0x0705u64 << 2, 0x0705u64 << 3, 0x0705u64 << 4, 0x0705u64 << 5, 0xC040u64,
    // y1
    0x030203u64, 0x070507u64, 0x070507u64 << 1, 0x070507u64 << 2, 0x070507u64 << 3, 0x070507u64 << 4, 0x070507u64 << 5, 0xC040C0u64,
    // y2
    0x030203u64 << 8, 0x070507u64 << 8, 0x070507u64 << 9, 0x070507u64 << 10, 0x070507u64 << 11, 0x070507u64 << 12, 0x070507u64 << 13, 0xC040C0u64 << 8,
    // y3
    0x030203u64 << 16, 0x070507u64 << 16, 0x070507u64 << 17, 0x070507u64 << 18, 0x070507u64 << 19, 0x070507u64 << 20, 0x070507u64 << 21, 0xC040C0u64 << 16,
    // y4
    0x030203u64 << 24, 0x070507u64 << 24, 0x070507u64 << 25, 0x070507u64 << 26, 0x070507u64 << 27, 0x070507u64 << 28, 0x070507u64 << 29, 0xC040C0u64 << 24,
    // y5
    0x030203u64 << 32, 0x070507u64 << 32, 0x070507u64 << 33, 0x070507u64 << 34, 0x070507u64 << 35, 0x070507u64 << 36, 0x070507u64 << 37, 0xC040C0u64 << 32,
    // y6
    0x030203u64 << 40, 0x070507u64 << 40, 0x070507u64 << 41, 0x070507u64 << 42, 0x070507u64 << 43, 0x070507u64 << 44, 0x070507u64 << 45, 0xC040C0u64 << 40,
    // y7
    0x0203u64 << 48, 0x0507u64 << 48, 0x0507u64 << 49, 0x0507u64 << 50, 0x0507u64 << 51, 0x0507u64 << 52, 0x0507u64 << 53, 0x40C0u64 << 48,
];

macro_rules! bit_left {
    ($x : expr) => {
        $x >>= 1;
    };
}

#[macro_export]
macro_rules! bit_right {
    ($x : expr) => {
        $x <<= 1;
    };
}

macro_rules! bit_up {
    ($x : expr) => {
        $x >>= NUMCELL;
    };
}

macro_rules! bit_down {
    ($x : expr) => {
        $x <<= NUMCELL;
    };
}

macro_rules! bit_leftup {
    ($x : expr) => {
        $x >>= NUMCELL + 1;
    };
}

macro_rules! bit_leftdown {
    ($x : expr) => {
        $x <<= NUMCELL - 1;
    };
}

macro_rules! bit_rightup {
    ($x : expr) => {
        $x >>= NUMCELL - 1;
    };
}

macro_rules! bit_rightdown {
    ($x : expr) => {
        $x <<= NUMCELL + 1;
    };
}

pub fn index2x(xy : u8) -> usize {
    xy as usize % NUMCELL
}

pub fn index2y(xy : u8) -> usize {
    xy as usize / NUMCELL
}

pub fn index2xy(xy : u8) -> (u8, u8) {
    (xy % NUMCELL as u8, xy / NUMCELL as u8)
}


#[derive(Clone)]
pub struct BitBoard {
    pub black: u64,
    pub white: u64,
    pub teban: i8,
    pub pass: i8,
}

impl Default for BitBoard {
    fn default() -> Self {
        Self::new()
    }
}

impl std::fmt::Display for BitBoard {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.to_str())
    }
}

impl BitBoard {
    pub fn new() -> BitBoard {
        BitBoard {
            black :
                (LSB_CELL << BitBoard::index(3, 3))
                | (LSB_CELL << BitBoard::index(4, 4)),
            white :
                (LSB_CELL << BitBoard::index(4, 3))
                | (LSB_CELL << BitBoard::index(3, 4)),
            teban : SENTE,
            pass : 0,
        }
    }

    pub fn from(rfen : &str) -> Result<BitBoard, String> {
        let elem = rfen.split_whitespace().collect::<Vec<_>>();

        if elem.len() != 2 {
            return Err(String::from("Invalid rfen"));
        }

        let teban =  match elem[1] {
            "b" => {SENTE},
            "w" => {GOTE},
            "f" => {BLANK}
            _ => { return Err(format!("Invalid teban: {}", elem[1])); }
        };

        let mut ret = BitBoard {
            black : 0,
            white : 0,
            teban,
            pass : 0,
        };
        let mut x = 0;
        let mut y = 0;
        for ch in elem[0].chars() {
            match ch {
                'A'..='H' => {
                    let n = ch as i32 + 1 - 'A' as i32;
                    ret.black |= BITPTN[n as usize] << Self::index(x, y);
                    x += n as usize;
                },
                'a'..='h' => {
                    let n = ch as i32 + 1 - 'a' as i32;
                    ret.white |= BITPTN[n as usize] << Self::index(x, y);
                    x += n as usize;
                },
                '1'..='8' => {
                    let n = ch as i32 - '0' as i32;
                    x += n as usize;
                },
                '/' => {
                    x = 0;
                    y += 1;
                },
                _ => {
                    return Err(format!("unknown letter rfen [{ch}]"));
                }
            }
        }

        Ok(ret)
    }

    #[allow(dead_code)]
    pub fn from_obf(obf : &str) -> Result<BitBoard, String> {
        if obf.len() < 65 {return Err("less letters.".to_string());}

        let mut ret = BitBoard {
            black : 0,
            white : 0,
            teban : SENTE,
            pass : 0,
        };
        for (i, ch)  in obf.chars().enumerate() {
            if i < 64 {
                let bit = LSB_CELL << i;
                match ch {
                'X' => {ret.black |= bit;},
                'O' => {ret.white |= bit;},
                '-' => {},
                _ => {return Err(format!("unknown letter:{ch}."))},
                }
            } else {
                match ch {
                'X' => {
                    ret.teban = SENTE;
                    return Ok(ret);
                },
                'O' => {
                    ret.teban = GOTE;
                    return Ok(ret);
                },
                ' ' => {},
                _ => {return Err(format!("unknown letter:{ch}."))},
                }
            }
        }
        Err("unknown obf format.".to_string())
    }

    pub fn to_str(&self) -> String {
        let mut ban = Vec::<String>::new();
        let black = self.black;
        let white = self.white;
        let mut bit : u64 = LSB_CELL;
        for _y in 0..NUMCELL {
            let mut old = NONE;
            let mut count = 0;
            let mut line = String::new();
            for _x in 0..NUMCELL {
                let cb = (bit & black) != 0;
                let cw = (bit & white) != 0;
                // println!("bit:0x{bit:016x}, cb:{cb}, cw:{cw}");
                bit_right!(bit);
                let c = if cb {SENTE} else if cw {GOTE} else {BLANK};
                if c == old {
                    count += 1;
                    continue;
                }

                if old == BLANK {
                    line.push(STR_NUM.chars().nth(count).unwrap());
                } else if old == SENTE {
                    line.push(STR_SENTE.chars().nth(count).unwrap());
                } else if old == GOTE {
                    line.push(STR_GOTE.chars().nth(count).unwrap());
                }

                old = c;
                count = 1;
            }

            if old == BLANK {
                line.push(STR_NUM.chars().nth(count).unwrap());
            } else if old == SENTE {
                line.push(STR_SENTE.chars().nth(count).unwrap());
            } else if old == GOTE {
                line.push(STR_GOTE.chars().nth(count).unwrap());
            }

            ban.push(line);
        }
        ban.join("/") + match self.teban {
            SENTE => { " b"}, GOTE => {" w"}, _ => {" f"}
        }
    }

    // othello BitBoard file format
    // init:
    // ---------------------------XO------OX--------------------------- X
    //
    pub fn to_obf(&self) -> String {
        let mut ban = String::new();
        let black = self.black;
        let white = self.white;
        let mut bit : u64 = LSB_CELL;
        for _y in 0..NUMCELL {
            for _x in 0..NUMCELL {
                let cb = (bit & black) != 0;
                let cw = (bit & white) != 0;
                bit_right!(bit);
                ban += if cb {"X"} else if cw {"O"} else {"-"};
            }
        }
        ban + match self.teban {
            SENTE => " X",
            GOTE => " O",
            _ => " -",
        }
    }

    pub fn hash(&self) -> u64 {
        // 乱数テーブルや定数（適当に大きくて奇妙な値を使う）
        const K1: u64 = 0x9e3779b185ebca87;
        const K2: u64 = 0xc2b2ae3d27d4eb4f;
        let mut h = self.black.wrapping_mul(K1) ^ self.white.wrapping_mul(K2);
        // さらに混ぜる
        h ^= h >> 33;
        h = h.wrapping_mul(0xff51afd7ed558ccd);
        h ^= h >> 33;
        h = h.wrapping_mul(0xc4ceb9fe1a85ec53);
        h ^= h >> 33;
        h
    }

    pub fn put(&self) {
        let black = self.black;
        let white = self.white;
        let mut bit : u64 = LSB_CELL;
        for _y in 0..NUMCELL {
            let mut line = String::new();
            for _x in 0..NUMCELL {
                let cb = (bit & black) != 0;
                let cw = (bit & white) != 0;
                bit_right!(bit);

                line += "|";
                line +=
                    if cb {
                        STONE_SENTE
                    } else if cw {
                        STONE_GOTE
                    } else {
                        "__"
                    };
            }
            println!("{line}|");
        }
        println!("{}", 
            match self.teban {
                SENTE => { format!("{STONE_SENTE}'s turn.")},
                GOTE => { format!("{STONE_GOTE}'s turn.")},
                _ => {"finished.".to_string()}
            }
        )
    }

    pub fn flipturn(&mut self) {
        self.teban = -self.teban;
    }

    pub fn resetpass(&mut self) {
        self.pass = 0;
    }

    pub fn pass(&mut self) {
        self.teban = -self.teban;
        self.pass += 1;
    }

    pub fn is_passpass(&self) -> bool {
        self.pass >= 2
    }

    pub fn nblank(&self) -> u32 {
        (self.black | self.white).count_zeros()
    }

    fn index(x: usize, y: usize) -> usize {
        x + NUMCELL * y
    }

    /// # Returns  
    /// - `(0, 0)` => u8::MAX as pass
    /// - `(x, y)` => (x-1) + (y - 1) * 8
    /// - `(x, y)` => ~~x + y * 8~~
    pub fn cell(x: u8, y: u8) -> u8 {
        if x == 0 || y == 0 {return u8::MAX;}

        x + NUMCELL as u8 * y - 1 - NUMCELL as u8
        // x + NUMCELL as u8 * y
    }

    #[allow(dead_code)]
    pub fn at(&self, x: u8, y: u8) -> i8 {
        let bit : u64 = LSB_CELL << BitBoard::index(x as usize, y as usize);
        let cb = (bit & self.black) != 0;
        let cw = (bit & self.white) != 0;

        if cb {SENTE} else if cw {GOTE} else {BLANK}
    }

    pub fn is_filled(&self, xy: u8) -> bool {
        let bit : u64 = LSB_CELL << xy;
        (bit & (self.black | self.white)) != 0
    }

    #[allow(dead_code)]
    pub fn set(&mut self, x : u8, y : u8) {
        let bit = LSB_CELL << BitBoard::index(x as usize, y as usize);
        let mask = !bit;
        if self.teban == SENTE {
            self.black |= bit;
            self.white &= mask;
        } else {
            self.black &= mask;
            self.white |= bit;
        }
    }

    /**
     * x : 0~7
     * y : 0~7
     */
    fn reverse(&mut self, xy : u8) {
        if xy >= CELL_2D as u8 {
            panic!("{xy} is out of range.");
        }

        let color = self.teban;
        let mine = if color == SENTE {self.black} else {self.white};
        let oppo = if color == SENTE {self.white} else {self.black};

        let pos = LSB_CELL << xy;
        let (x, y) = index2xy(xy);
        let x = x as usize;
        let y = y as usize;

        let mut revall = 0;

        // 右
        let usetzcnt = false;
        // let usetzcnt = true;
        if usetzcnt {
            let shift = BitBoard::index(x, y) + 1;
            let mask = (1u64 << (NUMCELL - 1 - x)) - 1;
            let obits = (oppo >> shift) ^ mask;
            let o = obits.trailing_zeros();
            let mbits = (mine >> shift) & mask;
            let m = mbits >> o;  // その先の自分の石
            // 相手の石が並んでいて、そのすぐ先に自分の石がある
            // if 0 < o && o <= 8 && (m & 0x1) != 0 {
            // if 0 < o && o < (7 - x as u32) && (m & 0x1) != 0 {
            if 0 < o  && (m & 0x1) != 0 {
                let rev = (1u64 << o) - 1;
                revall |= rev << shift;
            }
        } else {
            let mut bit : u64 = pos;
            let mut rev : u64 = 0;
            for _i in x..(NUMCELL - 1) {
                bit_right!(bit);
                if (oppo & bit) == 0 {break;}

                rev |= bit;
            }
            if (mine & bit) != 0 {
                revall |= rev;
            }
        }

        // 左
        let uselzcnt = false;
        // let uselzcnt = true;
        if uselzcnt {
            let shift = BitBoard::index(NUMCELL - 1 - x, NUMCELL - 1 - y) + 1;
            let mask = 0xff00000000000000u64 << (NUMCELL - x);
            let obits = (oppo << shift) ^ mask;  // 石のあるところがゼロになる
            let o = obits.leading_zeros();  // 相手の石が並んでいる数
            let mbits = (mine << shift) & mask;
            let m = mbits << o;  // その先の自分の石
            // let obito = (oppo << shift) & mask;
            // println!("(x{x},y{y}), {shift} {mask:x} {oppo:x} {mine:x} {obito:x} {obits:x} {o}>0 {mbits:x} ({m:x} & MSB) != 0");
            // 相手の石が並んでいて、そのすぐ先に自分の石がある
            if o > 0 && (m & (0x1 << 63)) != 0 {
                let rev = (1u64 << o) - 1;
                let rev = rev << BitBoard::index(x - o as usize, y);
                revall |= rev;
            }
        } else {
            let mut bit : u64 = pos;
            let mut rev : u64 = 0;
            for _i in 0..x {
                bit_left!(bit);
                if (oppo & bit) == 0 {break;}

                rev |= bit;
            }
            if (mine & bit) != 0 {
                revall |= rev;
            }
        }

        // 下
        let mut bit : u64 = pos;
        let mut rev : u64 = 0;
        for _i in y..(NUMCELL - 1) {
            bit_down!(bit);
            if (oppo & bit) == 0 {break;}

            rev |= bit;
        }
        if (mine & bit) != 0 {
            revall |= rev;
        }

        // 上
        let mut bit : u64 = pos;
        let mut rev : u64 = 0;
        for _i in 0..y {
            bit_up!(bit);
            if (oppo & bit) == 0 {break;}

            rev |= bit;
        }
        if (mine & bit) != 0 {
            revall |= rev;
        }

        // 右下
        let mut bit : u64 = pos;
        let mut rev : u64 = 0;
        let sz = if x > y {NUMCELL - 1 - x} else {NUMCELL - 1 - y};
        for _i in 0..sz {
            bit_rightdown!(bit);
            if (oppo & bit) == 0 {break;}

            rev |= bit;
        }
        if (mine & bit) != 0 {
            revall |= rev;
        }

        // 右上
        let mut bit : u64 = pos;
        let mut rev : u64 = 0;
        let xx = NUMCELL - 1 - x;
        let yy = y;
        let sz = if xx < yy {xx} else {yy};
        for _i in 0..sz {
            bit_rightup!(bit);
            if (oppo & bit) == 0 {break;}

            rev |= bit;
        }
        if (mine & bit) != 0 {
            revall |= rev;
        }

        // 左上
        let mut bit : u64 = pos;
        let mut rev : u64 = 0;
        let sz = if x < y {x} else {y};
        for _i in 0..sz {
            bit_leftup!(bit);
            if (oppo & bit) == 0 {break;}

            rev |= bit;
        }
        if (mine & bit) != 0 {
            revall |= rev;
        }

        // 左下
        let mut bit : u64 = pos;
        let mut rev : u64 = 0;
        let xx = x;
        let yy = NUMCELL - 1 - y;
        let sz = if xx < yy {xx} else {yy};
        for _i in 0..sz {
            bit_leftdown!(bit);
            if (oppo & bit) == 0 {break;}

            rev |= bit;
        }
        if (mine & bit) != 0 {
            revall |= rev;
        }

        if color == SENTE {
            self.black = mine | revall | pos;
            self.white = oppo ^ revall;
        } else {
            self.white = mine | revall | pos;
            self.black = oppo ^ revall;
        }
    }

    pub fn checkreverse(&self, xy : usize) -> bool {
        let color = self.teban;
        let mine = if color == SENTE {self.black} else {self.white};
        let oppo = if color == SENTE {self.white} else {self.black};
        let pos = LSB_CELL << xy;

        // check surrounding stones.
        if (TBL_SURROUND[xy] & oppo) == 0 {return false;}

        let (x, y) = index2xy(xy as u8);
        let x = x as usize;
        let y = y as usize;

        let usetzcnt = false;
        // let usetzcnt = true;
        let usetablelr = false;
        // let usetablelr = true;
        if usetzcnt {
            let shift = xy + 1;
            let mask = (1u64 << (NUMCELL - 1 - x)) - 1;
            let obits = (oppo >> shift) ^ mask;
            let o = obits.trailing_zeros();
            let mbits = (mine >> shift) & mask;
            let m = mbits >> o;  // その先の自分の石
            // 相手の石が並んでいて、そのすぐ先に自分の石がある
            if o > 0 && (m & 0x1) != 0 {return true;}

            let shift = BitBoard::index(NUMCELL - 1 - x, NUMCELL - 1 - y) + 1;
            let mask = 0xff00000000000000u64 << (NUMCELL - x);
            let obits = (oppo << shift) ^ mask;  // 石のあるところがゼロになる
            let o = obits.leading_zeros();  // 相手の石が並んでいる数
            let mbits = (mine << shift) & mask;
            let m = mbits << o;  // その先の自分の石
            // 相手の石が並んでいて、そのすぐ先に自分の石がある
            if o > 0 && (m & (0x1 << 63)) != 0 {return true;}
        } else if usetablelr {
            // 右
            let y8 = y * NUMCELL;
            let mn = ((mine >> y8) & 0xff) as u8;
            let op = ((oppo >> y8) & 0xff) as u8;
            let p = mn as usize >> (x + 1);
            let o = op as usize >> (x + 1);
            let idx = p * 127 + o;
            if TBLCHKREV[idx] != 0 {return true;}
            // 左
            let p = mn.reverse_bits() as usize >> (NUMCELL - x);
            let o = op.reverse_bits() as usize >> (NUMCELL - x);
            let idx = p * 127 + o;
            if TBLCHKREV[idx] != 0 {return true;}
        } else {
            // 右
            let mut bit = pos;
            let mut rev = false;
            for _i in x..(NUMCELL - 1) {
                bit_right!(bit);
                if (oppo & bit) == 0 {break;}

                rev = true;
            }
            if rev && (mine & bit) != 0 {return true;}

            // 左
            let mut bit = pos;
            let mut rev = false;
            for _i in 0..x {
                bit_left!(bit);
                if (oppo & bit) == 0 {break;}

                rev = true;
            }
            if rev && (mine & bit) != 0 {return true;}
        }

        // 下
        let mut bit = pos;
        let mut rev = false;
        for _i in y..(NUMCELL - 1) {
            bit_down!(bit);
            if (oppo & bit) == 0 {break;}

            rev = true;
        }
        if rev && (mine & bit) != 0 {return true;}

        // 上
        let mut bit = pos;
        let mut rev = false;
        for _i in 0..y {
            bit_up!(bit);
            if (oppo & bit) == 0 {break;}

            rev = true;
        }
        if rev && (mine & bit) != 0 {return true;}

        // 右下
        let mut bit = pos;
        let mut rev = false;
        let sz = if x > y {NUMCELL - 1 - x} else {NUMCELL - 1 - y};
        for _i in 0..sz {
            bit_rightdown!(bit);
            if (oppo & bit) == 0 {break;}

            rev = true;
        }
        if rev && (mine & bit) != 0 {return true;}

        // 右上
        let mut bit = pos;
        let mut rev = false;
        let xx = NUMCELL - 1 - x;
        let yy = y;
        let sz = if xx < yy {xx} else {yy};
        for _i in 0..sz {
            bit_rightup!(bit);
            if (oppo & bit) == 0 {break;}

            rev = true;
        }
        if rev && (mine & bit) != 0 {return true;}

        // 左上
        let mut bit = pos;
        let mut rev = false;
        let sz = if x < y {x} else {y};
        for _i in 0..sz {
            bit_leftup!(bit);
            if (oppo & bit) == 0 {break;}

            rev = true;
        }
        if rev && (mine & bit) != 0 {return true;}

        // 左下
        let mut bit = pos;
        let mut rev = false;
        let xx = x;
        let yy = NUMCELL - 1 - y;
        let sz = if xx < yy {xx} else {yy};
        for _i in 0..sz {
            bit_leftdown!(bit);
            if (oppo & bit) == 0 {break;}

            rev = true;
        }
        if rev && (mine & bit) != 0 {return true;}

        false
    }

    /**
     * @param xy u8::MAX : pass, 0 ~ 63 : cell index.
     */
    pub fn r#move(&self, xy : u8) -> Result<BitBoard, &str> {
        if xy == u8::MAX {  // pass
            let mut ban = self.clone();
            ban.pass();
            return Ok(ban);
        }

        if self.is_filled(xy) {
            return Err("stone exists.");
        }

        let mut ban = self.clone();
        // ban.set(xc, yc);
        ban.reverse(xy);
        ban.flipturn();
        ban.resetpass();

        Ok(ban)
    }

    /// # Returns
    /// - None : no empty cells.
    /// - Some(vec![])  : no available cells. pass.
    /// - Some(Vec![n]) : available cells.
    pub fn genmove(&self) -> Option<Vec<u8>> {
        let stones = self.black | self.white;
        if stones == u64::MAX {return None;}

        let mut bits = 0;
        let mut bit = LSB_CELL;
        for y in 0..NUMCELL {
            for x in 0..NUMCELL {
                let b = bit;
                bit_right!(bit);
                let exist = b & stones;
                if exist != 0 {
                    continue;
                }

                if self.checkreverse(BitBoard::index(x, y)) {
                    bits |= b;
                }
            }
        }

        let sz = bits.count_ones() as usize;
        if sz == 0 {  // pass
            // return Some(vec![]);
            return Some(vec![u8::MAX]);
        }

        let mut remain = bits;
        let mut ret = Vec::with_capacity(sz);
        while remain != 0 {
            let idx = remain.trailing_zeros() as u8;
            ret.push(idx);
            remain ^= 1 << idx;
            // remain &= !(1 << idx);
        }
        Some(ret)
    }

    pub fn count(&self) -> i8 {
        self.black.count_ones() as i8 - self.white.count_ones() as i8
    }

    pub fn countf32(&self) -> f32 {
        (self.black.count_ones() as i8 - self.white.count_ones() as i8) as f32
    }

    pub fn is_full(&self) -> bool {
        (self.black | self.white) == 0xffffffffffffffff
    }

    #[allow(dead_code)]
    pub fn stones(&self) -> u32 {
        (self.black | self.white).count_ones()
    }

    pub fn progress(&self) -> usize {
        let cnt = self.stones() as usize;
        let ret = ((cnt - 4) * weight::N_PROGRESS_DIV) / 60;
        #[cfg(test)]
        {
            if ret >= weight::N_PROGRESS_DIV {
                return weight::N_PROGRESS_DIV -1;
            }
        }
        ret
    }

    #[allow(dead_code)]
    pub fn is_progress(&self, prgs : usize) -> bool {
        self.progress() == prgs
    }

    #[allow(dead_code)]
    pub fn rotate90(&self) -> BitBoard {
        let mut black = 0;
        let mut white = 0;
        for x in 0..8 {
            let newy = 7 - x;
            for y in 0..8 {
                let newx = y;
                let idx = BitBoard::index(x as usize, y as usize);
                let bit = LSB_CELL << idx;
                let idx2 = BitBoard::index(newx as usize, newy as usize);
                let diff = idx2 as i32 - idx as i32;
                if diff >= 0 {  // <<
                    black |= (bit & self.black) << diff;
                    white |= (bit & self.white) << diff;
                } else {  // >>
                    let diff = -diff;
                    black |= (bit & self.black) >> diff;
                    white |= (bit & self.white) >> diff;
                }
            }
        }
        let mut b = BitBoard::new();
        b.teban = self.teban;
        b.black = black;
        b.white = white;
        b
    }

    #[allow(dead_code)]
    pub fn rotate180(&self) -> BitBoard {
        let mut b = BitBoard::new();
        b.teban = self.teban;
        b.black = self.black.reverse_bits();
        b.white = self.white.reverse_bits();
        b
    }

    fn fixstones_right(startbit : u64, tgt : u64, count : &mut i32) -> u64 {
        let mut fcells = 0u64;
        let mut bit = startbit;
        for _i in 1..7 {  // →
            bit_right!(bit);
            if (tgt & bit) == 0 {return fcells;}

            fcells |= bit;
            *count += 1;
        }
        fcells
    }

    fn fixstones_left(startbit : u64, tgt : u64, count : &mut i32) -> u64 {
        let mut fcells = 0u64;
        let mut bit = startbit;
        for _i in 1..7 {  // →
            bit_left!(bit);
            if (tgt & bit) == 0 {return fcells;}

            fcells |= bit;
            *count += 1;
        }
        fcells
    }

    fn fixstones_up(startbit : u64, tgt : u64, count : &mut i32) -> u64 {
        let mut fcells = 0u64;
        let mut bit = startbit;
        for _i in 1..7 {  // ↓
            bit_up!(bit);
            if (tgt & bit) == 0 {return fcells;}

            fcells |= bit;
            *count += 1;
        }
        fcells
    }

    fn fixstones_down(startbit : u64, tgt : u64, count : &mut i32) -> u64 {
        let mut fcells = 0u64;
        let mut bit = startbit;
        for _i in 1..7 {  // ↓
            bit_down!(bit);
            if (tgt & bit) == 0 {return fcells;}

            fcells |= bit;
            *count += 1;
        }
        fcells
    }

    pub fn fixedstones(&self) -> (i8, i8) {
        // return (0, 0);  // この関数が遅いのかを見極める用
        let mut count = 0;
        let black = self.black;
        let white = self.white;
        let mut fcellsb : u64 = black & CORNER_CELL;
        let mut fcellsw : u64 = white & CORNER_CELL;

        if (fcellsb | fcellsw) == 0 {return (0, 0);}

        // 四隅と辺
        let bit = LT_CELL;
        if (black & bit) != 0 {
            fcellsb |= Self::fixstones_right(bit, black, &mut count);
            fcellsb |= Self::fixstones_down(bit, black, &mut count);
        } else if (white & bit) != 0 {
            fcellsw |= Self::fixstones_right(bit, white, &mut count);
            fcellsw |= Self::fixstones_down(bit, white, &mut count);
        }
        let bit = RT_CELL;
        if (black & bit) != 0 {
            fcellsb |= Self::fixstones_left(bit, black, &mut count);
            fcellsb |= Self::fixstones_down(bit, black, &mut count);
        } else if (white & bit) != 0 {
            fcellsw |= Self::fixstones_left(bit, white, &mut count);
            fcellsw |= Self::fixstones_down(bit, white, &mut count);
        }
        let bit = LB_CELL;
        if (black & bit) != 0 {
            fcellsb |= Self::fixstones_right(bit, black, &mut count);
            fcellsb |= Self::fixstones_up(bit, black, &mut count);
        } else if (white & bit) != 0 {
            fcellsw |= Self::fixstones_right(bit, white, &mut count);
            fcellsw |= Self::fixstones_up(bit, white, &mut count);
        }
        let bit = RB_CELL;
        if (black & bit) != 0 {
            fcellsb |= Self::fixstones_left(bit, black, &mut count);
            fcellsb |= Self::fixstones_up(bit, black, &mut count);
        } else if (white & bit) != 0 {
            fcellsw |= Self::fixstones_left(bit, white, &mut count);
            fcellsw |= Self::fixstones_up(bit, white, &mut count);
        }
        if count < 4 {
            return (fcellsb.count_ones() as i8, fcellsw.count_ones() as i8);
        }
        // 中身
        // こんな感じなら確定石
        // xx?  x??
        // x@?  x@?
        // x??  xx?
        for x in 1..7 {
            let mut cnt = 0;
            // 左3つ fcells[] == @
            // 上 fcells[] == @
            let mut bit = LSB_CELL << BitBoard::index(x, 1);
            let mut wbit = 0x0000000000010103 << BitBoard::index(x - 1, 0);
            // let mut wbit = 0x0000000000000107 << BitBoard::index(x - 1, 0);
            for _y in 0..6 {
                // println!("bit:{bit:b}, wbit:{wbit:b}");

                if (bit & (fcellsb | fcellsw)) != 0 {
                   // println!("if fcb | fcw");
                    bit_down!(bit);
                    bit_down!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {
                        // println!("fcellsb : {fcellsb:b}");
                        break;
                    }

                    fcellsb |= bit;
                    cnt += 1;
                    // println!("fcellsb : {fcellsb:b}, {cnt}");
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {
                        // println!("fcellsw : {fcellsw:b}");
                        break;
                    }

                    fcellsw |= bit;
                    cnt += 1;
                } else {
                    break;
                }

                bit_down!(bit);
                bit_down!(wbit);
            }
            // 左3つ fcells[] == @
            // 下 fcells[] == @
            let mut bit = LSB_CELL << BitBoard::index(x, NUMCELL - 2);
            let mut wbit = 0x0000000000030101 << BitBoard::index(x - 1, NUMCELL - 3);
            // let mut wbit = 0x0000000000000407 << BitBoard::index(x - 1, NUMCELL - 3);
            for _y in (0..6).rev() {
                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_up!(bit);
                    bit_up!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                    // println!("xy: {x:x}, {y:x}");
                    // println!("bit:{bit:x}, wbit:{wbit:x}");
                    // println!("fcellsw : {fcellsw:b}, {cnt}");
                } else {
                    break;
                }

                bit_up!(bit);
                bit_up!(wbit);
            }
            if cnt == 0 {break;}
        }
        // xxx  xxx
        // x@?  ?@x
        // ???  ???
        for y in 1..7 {
            let mut cnt = 0;
            // 上3つ fcells[] == @
            // 左 fcells[] == @
            let mut bit : u64 = LSB_CELL << BitBoard::index(1, y);
            let mut wbit = 0x0000000000000107 << BitBoard::index(0, y - 1);
            // let mut wbit = 0x0000000000010103 << BitBoard::index(0, y - 1);
            for _x in 1..7 {
                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_right!(bit);
                    bit_right!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                } else {
                    break;
                }

                bit_right!(bit);
                bit_right!(wbit);
            }
            // 上3つ fcells[] == @
            // 右 fcells[] == @
            let mut bit : u64 = LSB_CELL << BitBoard::index(NUMCELL - 2, y);
            let mut wbit = 0x0000000000000407 << BitBoard::index(NUMCELL - 3, y - 1);
            for _x in (1..7).rev() {
                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_left!(bit);
                    bit_left!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                } else {
                    break;
                }

                bit_left!(bit);
                bit_left!(wbit);
            }
            if cnt == 0 {break;}
        }
        //
        // ?xx  ??x
        // ?@x  ?@x
        // ??x  ?xx
        for x in (1..7).rev() {
            let mut cnt = 0;
            // 右3つ fcells[] == @
            // 上 fcells[] == @
            let mut bit : u64 = LSB_CELL << BitBoard::index(x, 1);
            let mut wbit = 0x0000000000040406 << BitBoard::index(x - 1, 0);
            // let mut wbit = 0x0000000000070100 << BitBoard::index(x - 1, 0);
            for _y in 1..7 {
                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_down!(bit);
                    bit_down!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                } else {
                    break;
                }

                bit_down!(bit);
                bit_down!(wbit);
            }
            // 右3つ fcells[] == @
            // 下 fcells[] == @
            let mut bit : u64 = LSB_CELL << BitBoard::index(x, NUMCELL - 2);
            let mut wbit = 0x0000000000060404 << BitBoard::index(x - 1, NUMCELL - 3);
            for _y in (1..7).rev() {
                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_up!(bit);
                    bit_up!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                } else {
                    break;
                }

                bit_up!(bit);
                bit_up!(wbit);
            }
            if cnt == 0 {break;}
        }

        // ???  ???
        // ?@x  x@?
        // xxx  xxx
        for y in (1..7).rev() {
            let mut cnt = 0;
            // 下3つ fcells[] == @
            // 左 fcells[] == @
            let mut bit : u64 = LSB_CELL << BitBoard::index(1, y);
            let mut wbit = 0x0000000000070100 << BitBoard::index(0, y - 1);
            for _x in 1..7 {
                // println!("bit:{bit:08x}, wbit:{wbit:08x}");

                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_right!(bit);
                    bit_right!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                    // println!("fcellsw : {fcellsw:08x}, {cnt}");
                } else {
                    break;
                }

                bit_right!(bit);
                bit_right!(wbit);
            }
            // 下3つ fcells[] == @
            // 右 fcells[] == @
            let mut bit : u64 = LSB_CELL << BitBoard::index(NUMCELL - 2, y);
            let mut wbit = 0x0000000000070400 << BitBoard::index(NUMCELL - 3, y - 1);
            for _x in (1..7).rev() {
                let cb = (bit & black) != 0;
                let cw = (bit & white) != 0;
                if !(cb | cw) {break;}

                if (bit & (fcellsb | fcellsw)) != 0 {
                    bit_left!(bit);
                    bit_left!(wbit);
                    continue;
                }

                if (bit & black) != 0 {
                    if (fcellsb & wbit) != wbit {break;}

                    fcellsb |= bit;
                    cnt += 1;
                } else if (bit & white) != 0 {
                    if (fcellsw & wbit) != wbit {break;}

                    fcellsw |= bit;
                    cnt += 1;
                } else {
                    break;
                }

                bit_left!(bit);
                bit_left!(wbit);
            }
            if cnt == 0 {break;}
        }
        //
        // xは@と同じ色の確定石
        // println!("fc:{:?}, {:?}", fcells, count);
        // println!("fc:{:?}", count);
        // for i in 0..8 {
        //     for j in 0..8 {
        //         print!("{},", fcells[i * 8 + j]);
        //     }
        //     println!("");
        // }
        // println!("fc:{:b}, {:b}", fcellsb, fcellsw);
        (fcellsb.count_ones() as i8, fcellsw.count_ones() as i8)
    }
}

/// count # of empty cells
/// 
/// # Argument
/// - `rfen` : rfen text.
/// 
/// # Returns
/// - Ok(# of empty cells) if succeeded.
/// - Err(msg) if some error happend.
pub fn count_emptycells(rfen : &str) -> Result<i8, String> {
    let mut count = 0;

    for ch in rfen.chars() {
        match ch {
            'A'..='H' => {
                // let n = ch  as i8 + 1 - 'A'  as i8;
                // count += n;
            },
            'a'..='h' => {
                // let n = ch  as i8 + 1 - 'a'  as i8;
                // count += n;
            },
            '1'..='8' => {
                let n = ch as i8 - '0' as i8;
                count += n;
            },
            '/' => {},
            ' ' => {
                return Ok(count);
            },
            _ => {
                return Err(format!("unknown letter rfen [{ch}]"));
            }
        }
    }
    Err(format!("invalid format [{rfen}]"))
}

/// count # of stones
/// 
/// # Argument
/// - `rfen` : rfen text.
/// 
/// # Returns
/// - Ok(# of stones) if succeeded.
/// - Err(msg) if some error happend.
#[allow(dead_code)]
pub fn count_stones(rfen : &str) -> Result<i8, String> {
    match count_emptycells(rfen) {
        Ok(n) => {Ok(64 - n)},
        Err(m) => {Err(m)}
    }
}

#[test]
fn testbitbrd() {
    let b = BitBoard::new();
    assert_eq!(b.teban, SENTE);
    assert_eq!(b.pass, 0);
    // println!("b.black:0x{:016X}", b.black);
    // println!("b.white:0x{:016X}", b.white);
    assert_eq!(b.black, 0x0000001008000000);
    assert_eq!(b.white, 0x0000000810000000);
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 0);
    assert_eq!(b.to_str(), "8/8/8/3Aa3/3aA3/8/8/8 b");
    assert_eq!(b.to_obf(),
        "---------------------------XO------OX--------------------------- X");
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(5, 3), BitBoard::cell(6, 4), BitBoard::cell(3, 5), BitBoard::cell(4, 6)]));
    let b = BitBoard::from("H/H/H/H/H/H/H/H b").unwrap();
    assert_eq!(b.teban, SENTE);
    assert_eq!(b.pass, 0);
    assert_eq!(b.black, 0xffffffffffffffff);
    assert_eq!(b.white, 0);
    assert_eq!(b.fixedstones(), (64, 0));
    assert_eq!(b.count(), 64);
    assert_eq!(b.to_obf(),
        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX X");
    assert!(b.genmove().is_none());
    let mut b = BitBoard::from("h/h/h/h/h/h/h/h w").unwrap();
    assert_eq!(b.teban, GOTE);
    assert_eq!(b.pass, 0);
    assert_eq!(b.black, 0);
    assert_eq!(b.white, 0xffffffffffffffff);
    assert_eq!(b.to_obf(),
        "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO O");
    assert!(b.genmove().is_none());
    b.pass();
    assert_eq!(b.teban, SENTE);
    assert_eq!(b.pass, 1);
    assert!(!b.is_passpass());
    assert!(b.is_full());
    assert_eq!(b.to_obf(),
        "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO X");
    assert!(b.genmove().is_none());
    b.pass();
    assert_eq!(b.teban, GOTE);
    assert_eq!(b.pass, 2);
    assert!(b.is_passpass());
    assert!(b.is_full());
    assert_eq!(b.fixedstones(), (0, 64));
    assert_eq!(b.count(), -64);
    assert_eq!(b.to_obf(),
        "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO O");
    let b = BitBoard::from("1Fa/Bf/AaAe/AbAd/AcAc/AdAb/AeAa/h w").unwrap();
    // b.put();
    assert_eq!(b.black, 0x004121110905037E);
    assert_eq!(b.white, 0xffbedeeef6fafc80);
    assert!(b.checkreverse(BitBoard::index(0, 0)));
    assert_eq!(b.fixedstones(), (0, 15));
    assert_eq!(b.count(),
      6 + 2 + 2 + 2 + 2 + 2 + 2 -
      (1 + 6 + 1 + 5 + 2 + 4 + 3 + 3 + 4 + 2 + 5 + 1 + 8));
    assert_eq!(b.to_obf(),
      "-XXXXXXOXXOOOOOOXOXOOOOOXOOXOOOOXOOOXOOOXOOOOXOOXOOOOOXOOOOOOOOO O");
    let b = b.r#move(BitBoard::cell(1, 1));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.black, 0x0);
    assert_eq!(b.white, 0xffffffffffffffff);
    assert_eq!(b.to_str(), "h/h/h/h/h/h/h/h b");
    let b = BitBoard::from("1Fa/Bf/AaAe/AbAd/AcAc/AdAb/AeAa/h w").unwrap();
    // b.put();
    let b90 = b.rotate90();
    // b90.put();
    assert_eq!(b90.to_str(), "h/AeAa/AdAb/AcAc/AbAd/AaAe/Bf/1Fa w");
    assert_eq!(b90.black, 0x7e03050911214100);
    assert_eq!(b90.white, 0x80FCFAF6EEDEBEFF);
    assert_eq!(b90.fixedstones(), (0, 15));
    let br = b90.r#move(BitBoard::cell(1, 8));
    assert!(br.is_ok());
    let br = br.unwrap();
    assert_eq!(br.to_str(), "h/h/h/h/h/h/h/h b");
    assert_eq!(br.fixedstones(), (0, 64));
    assert_eq!(br.count(), -64);
    let b180 = b.rotate180();
    assert_eq!(b180.black, 0x7EC0A09088848200);
    assert_eq!(b180.white, 0x013f5f6f777b7dff);
    // b180.put();
    assert_eq!(b180.fixedstones(), (0, 15));
    let b = b180.r#move(BitBoard::cell(8, 8));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_str(), "h/h/h/h/h/h/h/h b");
    assert_eq!(b.fixedstones(), (0, 64));
    assert_eq!(b.count(), -64);
    let b = BitBoard::from("Af1/Fb/EaAa/DaBa/CaCa/BaDa/AaEa/H b").unwrap();
    b.put();
    println!("b.black:0x{:016X}", b.black);
    println!("b.white:0x{:016X}", b.white);
    assert_eq!(b.black, 0xFF7D7B776F5F3F01);
    assert_eq!(b.white, 0x0082848890A0C07E);
    assert!(b.checkreverse(BitBoard::index(7, 0)));
    assert_eq!(b.fixedstones(), (15, 0));
    assert_eq!(b.count(),
      -(6 + 2 + 2 + 2 + 2 + 2 + 2) +
      (1 + 6 + 1 + 5 + 2 + 4 + 3 + 3 + 4 + 2 + 5 + 1 + 8));
    assert_eq!(b.to_obf(),
      "XOOOOOO-XXXXXXOOXXXXXOXOXXXXOXXOXXXOXXXOXXOXXXXOXOXXXXXOXXXXXXXX X");
    let b = b.r#move(BitBoard::cell(8, 1));
    assert!(b.is_ok());
    let b = b.unwrap();
    b.put();
    assert_eq!(b.black, 0xffffffffffffffff);
    assert_eq!(b.white, 0x0);
    assert_eq!(b.to_str(), "H/H/H/H/H/H/H/H w");
    let b = BitBoard::from("Af1/Fb/EaAa/DaBa/CaCa/BaDa/AaEa/H b").unwrap();
    let b90 = b.rotate90();
    b90.put();
    assert_eq!(b90.to_str(), "1fA/bF/aAaE/aBaD/aCaC/aDaB/aEaA/H b");
    assert_eq!(b90.black, 0xFFBEDEEEF6FAFC80);
    assert_eq!(b90.white, 0x004121110905037E);
    assert_eq!(b90.fixedstones(), (15, 0));
    let br = b90.r#move(BitBoard::cell(1, 1));
    assert!(br.is_ok());
    let br = br.unwrap();
    assert_eq!(br.to_str(), "H/H/H/H/H/H/H/H w");
    assert_eq!(br.fixedstones(), (64, 0));
    assert_eq!(br.count(), 64);
    let b180 = b.rotate180();
    // b.put();
    println!("b180.black:0x{:x}", b180.black);
    println!("b180.white:0x{:x}", b180.white);
    assert_eq!(b180.black, 0x80FCFAF6EEDEBEFF);
    assert_eq!(b180.white, 0x7E03050911214100);
    assert!(b180.checkreverse(BitBoard::index(0, 7)));
    assert_eq!(b180.fixedstones(), (15, 0));
    assert_eq!(b180.count(),
      -(6 + 2 + 2 + 2 + 2 + 2 + 2) +
      (1 + 6 + 1 + 5 + 2 + 4 + 3 + 3 + 4 + 2 + 5 + 1 + 8));
    assert_eq!(b180.to_obf(),
      "XXXXXXXXOXXXXXOXOXXXXOXXOXXXOXXXOXXOXXXXOXOXXXXXOOXXXXXX-OOOOOOX X");
    let b = b180.r#move(BitBoard::cell(1, 8));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.black, 0xffffffffffffffff);
    assert_eq!(b.white, 0x0);
    assert_eq!(b.to_str(), "H/H/H/H/H/H/H/H w");
    let b = BitBoard::from("H/G1/F2/E3/D4/C5/B6/A7 w").unwrap();
    assert_eq!(b.to_obf(),
        "XXXXXXXXXXXXXXX-XXXXXX--XXXXX---XXXX----XXX-----XX------X------- O");
    assert_eq!(b.fixedstones(), (36, 0));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "A7/B6/C5/D4/E3/F2/G1/H w");
    assert_eq!(b90.black, 0xFF7F3F1F0F070301);
    assert_eq!(b90.white, 0x0);
    assert_eq!(b90.fixedstones(), (36, 0));
    let b180 = b.rotate180();
    assert_eq!(b180.fixedstones(), (36, 0));
    let b = BitBoard::from("h/1g/2f/3e/4d/5c/6b/7a w").unwrap();
    assert_eq!(b.to_obf(),
        "OOOOOOOO-OOOOOOO--OOOOOO---OOOOO----OOOO-----OOO------OO-------O O");
    assert_eq!(b.fixedstones(), (0, 36));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "h/g1/f2/e3/d4/c5/b6/a7 w");
    assert_eq!(b90.black, 0x0);
    assert_eq!(b90.white, 0x0103070F1F3F7FFF);
    assert_eq!(b90.fixedstones(), (0, 36));
    let b180 = b.rotate180();
    assert_eq!(b180.fixedstones(), (0, 36));
    let b = BitBoard::from("H/8/8/8/8/8/8/8 b").unwrap();
    assert_eq!(b.to_obf(),
        "XXXXXXXX-------------------------------------------------------- X");
    assert_eq!(b.fixedstones(), (8, 0));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "A7/A7/A7/A7/A7/A7/A7/A7 b");
    assert_eq!(b90.black, 0x0101010101010101);
    assert_eq!(b90.white, 0x0);
    assert_eq!(b90.fixedstones(), (8, 0));
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "--------------------------------------------------------XXXXXXXX X");
    assert_eq!(b180.fixedstones(), (8, 0));
    let b = BitBoard::from("a7/a7/a7/a7/a7/a7/a7/a7 b").unwrap();
    assert_eq!(b.to_obf(),
        "O-------O-------O-------O-------O-------O-------O-------O------- X");
    assert_eq!(b.fixedstones(), (0, 8));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "8/8/8/8/8/8/8/h b");
    assert_eq!(b90.black, 0x0);
    assert_eq!(b90.white, 0xFF00000000000000);
    assert_eq!(b90.fixedstones(), (0, 8));
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "-------O-------O-------O-------O-------O-------O-------O-------O X");
    assert_eq!(b.fixedstones(), (0, 8));
    let b = BitBoard::from("dD/dD/dD/dD/dD/dD/dD/dD b").unwrap();
    assert_eq!(b.to_obf(),
        "OOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXX X");
    assert_eq!(b.fixedstones(), (32, 32));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "H/H/H/H/h/h/h/h b");
    assert_eq!(b90.black, 0x00000000FFFFFFFF);
    assert_eq!(b90.white, 0xFFFFFFFF00000000);
    assert_eq!(b90.fixedstones(), (32, 32));
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "XXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOOXXXXOOOO X");
    assert_eq!(b180.fixedstones(), (32, 32));
    let b = BitBoard::from("h/h/h/h/H/H/H/H b").unwrap();
    assert_eq!(b.to_obf(),
        "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX X");
    assert_eq!(b.fixedstones(), (32, 32));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "dD/dD/dD/dD/dD/dD/dD/dD b");
    assert_eq!(b90.black, 0xF0F0F0F0F0F0F0F0);
    assert_eq!(b90.white, 0x0F0F0F0F0F0F0F0F);
    assert_eq!(b90.fixedstones(), (32, 32));
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO X");
    assert_eq!(b180.fixedstones(), (32, 32));
    let b = BitBoard::from("h/h/8/8/8/8/H/H b").unwrap();
    assert_eq!(b.to_obf(),
        "OOOOOOOOOOOOOOOO--------------------------------XXXXXXXXXXXXXXXX X");
    assert_eq!(b.fixedstones(), (16, 16));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "b4B/b4B/b4B/b4B/b4B/b4B/b4B/b4B b");
    println!("b90.black:0x{:X}", b90.black);
    println!("b90.white:0x{:X}", b90.white);
    assert_eq!(b90.black, 0xC0C0C0C0C0C0C0C0);
    assert_eq!(b90.white, 0x0303030303030303);
    assert_eq!(b90.fixedstones(), (16, 16));
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "XXXXXXXXXXXXXXXX--------------------------------OOOOOOOOOOOOOOOO X");
    assert_eq!(b180.fixedstones(), (16, 16));
    let b = BitBoard::from("b4B/b4B/b4B/b4B/b4B/b4B/b4B/b4B w").unwrap();
    assert_eq!(b.to_obf(),
        "OO----XXOO----XXOO----XXOO----XXOO----XXOO----XXOO----XXOO----XX O");
    assert_eq!(b.fixedstones(), (16, 16));
    let b90 = b.rotate90();
    assert_eq!(b90.to_str(), "H/H/8/8/8/8/h/h w");
    assert_eq!(b90.black, 0x000000000000FFFF);
    assert_eq!(b90.white, 0xFFFF000000000000);
    assert_eq!(b90.fixedstones(), (16, 16));
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "XX----OOXX----OOXX----OOXX----OOXX----OOXX----OOXX----OOXX----OO O");
    assert_eq!(b.fixedstones(), (16, 16));
    let b = BitBoard::from("1A6/A1eA/1a6/1a6/1a6/1a6/1a6/1A6 b").unwrap();
    assert_eq!(b.to_obf(),
        "-X------X-OOOOOX-O-------O-------O-------O-------O-------X------ X");
    assert!(b.checkreverse(BitBoard::index(1, 1)));
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 4 - 10);
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(2, 2), BitBoard::cell(4, 3), BitBoard::cell(3, 4)]));
    let b = b.r#move(BitBoard::cell(2, 2));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "-X------XXXXXXXX-X-------X-------X-------X-------X-------X------ O");
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 15);
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    // assert_eq!(mv, Some(vec![]));
    let b = BitBoard::from("1A6/A1eA/1a6/1a6/1a6/1a6/1a6/1A6 b").unwrap();
    let b90 = b.rotate90();
    b90.put();
    println!("b90.black:0x{:X}", b90.black);
    println!("b90.white:0x{:X}", b90.white);
    assert_eq!(b90.to_str(), "1A6/1a6/1a6/1a6/1a6/1a6/A1eA/1A6 b");
    assert_eq!(b90.black, 0x0281000000000002);
    assert_eq!(b90.white, 0x007C020202020200);
    assert_eq!(b90.fixedstones(), (0, 0));
    assert!(b90.checkreverse(BitBoard::index(1, 6)));
    let mv = b90.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(3, 5), BitBoard::cell(4, 6), BitBoard::cell(2, 7)]));
    let br = b90.r#move(BitBoard::cell(2, 7));
    assert!(br.is_ok());
    let br = br.unwrap();
    assert_eq!(br.to_str(), "1A6/1A6/1A6/1A6/1A6/1A6/H/1A6 w");
    assert_eq!(br.fixedstones(), (0, 0));
    assert_eq!(br.count(), 15);
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "------X-------O-------O-------O-------O-------O-XOOOOO-X------X- X");
    assert!(b180.checkreverse(BitBoard::index(6, 6)));
    assert_eq!(b180.fixedstones(), (0, 0));
    assert_eq!(b180.count(), 4 - 10);
    let mv = b180.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(6, 5), BitBoard::cell(5, 6), BitBoard::cell(7, 7)]));
    let b = b180.r#move(BitBoard::cell(7, 7));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "------X-------X-------X-------X-------X-------X-XXXXXXXX------X- O");
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 15);
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    // assert_eq!(mv, Some(vec![]));
    let b = BitBoard::from("2A5/2a5/Aa1dA/2a5/2a5/2a5/2a5/2A5 b").unwrap();
    assert_eq!(b.to_obf(),
        "--X-------O-----XO-OOOOX--O-------O-------O-------O-------X----- X");
    assert!(b.checkreverse(BitBoard::index(2, 2)));
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 4 - 10);
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(3, 3)]));
    let b = b.r#move(BitBoard::cell(3, 3));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "--X-------X-----XXXXXXXX--X-------X-------X-------X-------X----- O");
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 15);
    let mv = b.genmove();
    // assert_eq!(mv, Some(vec![]));
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    let b = BitBoard::from("2A5/2a5/Aa1dA/2a5/2a5/2a5/2a5/2A5 b").unwrap();
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "-----X-------O-------O-------O-------O--XOOOO-OX-----O-------X-- X");
    assert!(b180.checkreverse(BitBoard::index(5, 5)));
    assert_eq!(b180.fixedstones(), (0, 0));
    assert_eq!(b180.count(), 4 - 10);
    let mv = b180.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(6, 6)]));
    let b = b180.r#move(BitBoard::cell(6, 6));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "-----X-------X-------X-------X-------X--XXXXXXXX-----X-------X-- O");
    assert_eq!(b.fixedstones(), (0, 0));
    assert_eq!(b.count(), 15);
    let mv = b.genmove();
    // assert_eq!(mv, Some(vec![]));
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    let b = BitBoard::from("B6/A1eA/1b5/1a1a4/1a2a3/1a3a2/1a4a1/1A5A b").unwrap();
    assert_eq!(b.to_obf(),
        "XX------X-OOOOOX-OO------O-O-----O--O----O---O---O----O--X-----X X");
    assert!(b.checkreverse(BitBoard::index(1, 1)));
    assert_eq!(b.fixedstones(), (4, 0));
    assert_eq!(b.count(), 6 - 15);
    b.put();
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(2, 2), BitBoard::cell(4, 3), BitBoard::cell(3, 4)]));
    let b = b.r#move(BitBoard::cell(2, 2));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "XX------XXXXXXXX-XX------X-X-----X--X----X---X---X----X--X-----X O");
    assert_eq!(b.fixedstones(), (4, 0));
    assert_eq!(b.count(), 22);
    let mv = b.genmove();
    // assert_eq!(mv, Some(vec![]));
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    let b = BitBoard::from("B6/A1eA/1b5/1a1a4/1a2a3/1a3a2/1a4a1/1A5A b").unwrap();
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "X-----X--O----O---O---O----O--O-----O-O------OO-XOOOOO-X------XX X");
    assert!(b180.checkreverse(BitBoard::index(6, 6)));
    assert_eq!(b180.fixedstones(), (4, 0));
    assert_eq!(b180.count(), 6 - 15);
    let mv = b180.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(6, 5), BitBoard::cell(5, 6), BitBoard::cell(7, 7)]));
    let b = b180.r#move(BitBoard::cell(7, 7));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "X-----X--X----X---X---X----X--X-----X-X------XX-XXXXXXXX------XX O");
    assert_eq!(b.fixedstones(), (4, 0));
    assert_eq!(b.count(), 22);
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    // assert_eq!(mv, Some(vec![]));
    let b = BitBoard::from("A1A1A3/1c4/Aa1dA/1c4/A1a1a3/2a2a2/2a3a1/2A4A b").unwrap();
    assert_eq!(b.to_obf(),
        "X-X-X----OOO----XO-OOOOX-OOO----X-O-O-----O--O----O---O---X----X X");
    assert!(b.checkreverse(BitBoard::index(2, 2)));
    assert_eq!(b.fixedstones(), (2, 0));
    assert_eq!(b.count(), 8 - 17);
    let mv = b.genmove();
    // b.put();
    assert_eq!(mv, Some(vec![BitBoard::cell(3, 3), BitBoard::cell(6, 4), BitBoard::cell(4, 6)]));
    let b = b.r#move(BitBoard::cell(3, 3));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "X-X-X----XXX----XXXXXXXX-XXX----X-X-X-----X--X----X---X---X----X O");
    assert_eq!(b.fixedstones(), (2, 0));
    assert_eq!(b.count(), 26);
    let mv = b.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    // assert_eq!(mv, Some(vec![]));
    let b = BitBoard::from("A1A1A3/1c4/Aa1dA/1c4/A1a1a3/2a2a2/2a3a1/2A4A b").unwrap();
    let b180 = b.rotate180();
    assert_eq!(b180.to_obf(),
        "X----X---O---O----O--O-----O-O-X----OOO-XOOOO-OX----OOO----X-X-X X");
    assert!(b180.checkreverse(BitBoard::index(5, 5)));
    assert_eq!(b180.fixedstones(), (2, 0));
    assert_eq!(b180.count(), 8 - 17);
    let mv = b180.genmove();
    assert_eq!(mv, Some(vec![BitBoard::cell(5, 3), BitBoard::cell(3, 5), BitBoard::cell(6, 6)]));
    let b = b180.r#move(BitBoard::cell(6, 6));
    assert!(b.is_ok());
    let b = b.unwrap();
    assert_eq!(b.to_obf(),
        "X----X---X---X----X--X-----X-X-X----XXX-XXXXXXXX----XXX----X-X-X O");
    assert_eq!(b.fixedstones(), (2, 0));
    assert_eq!(b.count(), 26);
    let mv = b.genmove();
    // assert_eq!(mv, Some(vec![]));
    assert_eq!(mv, Some(vec![BitBoard::cell(0, 0)]));
    // difficult to count correctly
    // difficult to count correctly
    // let b = BitBoard::from("H/AaF/C5/D4/C1A3/C2A2/C3A1/C4A b").unwrap();
    // assert_eq!(b.fixedstones(), (34, 1));
    // let b180 = b.rotate180();
    // assert_eq!(b180.fixedstones(), (34, 1));
    // difficult to count correctly
    // let b = BitBoard::from("H/aG/C5/D4/C1A3/C2A2/C3A1/C4A b").unwrap();
    // assert_eq!(b.fixedstones(), (31, 1));
    // let b180 = b.rotate180();
    // assert_eq!(b180.fixedstones(), (31, 1));
    assert_eq!(count_emptycells("8/8/8/3Aa3/3aA3/8/8/8 b").unwrap(), 60);
    assert_eq!(count_stones("8/8/8/3Aa3/3aA3/8/8/8 b").unwrap(), 4);
    assert_eq!(count_emptycells("H/aG/C5/D4/C1A3/C2A2/C3A1/C4A b").unwrap(), 25);
    assert_eq!(count_stones("H/aG/C5/D4/C1A3/C2A2/C3A1/C4A b").unwrap(), 39);
    assert_eq!(count_emptycells("H/AaF/C5/D4/C1A3/C2A2/C3A1/C4A b").unwrap(), 25);
    assert_eq!(count_stones("H/AaF/C5/D4/C1A3/C2A2/C3A1/C4A b").unwrap(), 39);
}

#[test]
fn testbitbrd_reverse() {
    let revchktbl = [
        ("-OOOOOOX-------------------------------------------------------- X", 0, 0),
        ("-OOOOOX--------------------------------------------------------- X", 0, 0),
        ("-OOOOX---------------------------------------------------------- X", 0, 0),
        ("-OOOX----------------------------------------------------------- X", 0, 0),
        ("-OOX------------------------------------------------------------ X", 0, 0),
        ("-OX------------------------------------------------------------- X", 0, 0),
        ("--------O-------O-------O-------O-------O-------O-------X------- X", 0, 0),
        ("--------O-------O-------O-------O-------O-------X--------------- X", 0, 0),
        ("--------O-------O-------O-------O-------X----------------------- X", 0, 0),
        ("--------O-------O-------O-------X------------------------------- X", 0, 0),
        ("--------O-------O-------X--------------------------------------- X", 0, 0),
        ("--------O-------X----------------------------------------------- X", 0, 0),
        ("---------O--------O--------O--------O--------O--------O--------X X", 0, 0),
        ("---------O--------O--------O--------O--------O--------X--------X X", 0, 0),
        ("---------O--------O--------O--------O--------X--------O--------X X", 0, 0),
        ("---------O--------O--------O--------X--------O--------O--------X X", 0, 0),
        ("---------O--------O--------X--------O--------O--------O--------X X", 0, 0),
        ("---------O--------X--------O--------O--------O--------O--------X X", 0, 0),
        ("XOOOOOO--------------------------------------------------------- X", 7, 0),
        ("-XOOOOO--------------------------------------------------------- X", 7, 0),
        ("--XOOOO--------------------------------------------------------- X", 7, 0),
        ("---XOOO--------------------------------------------------------- X", 7, 0),
        ("----XOO--------------------------------------------------------- X", 7, 0),
        ("-----XO--------------------------------------------------------- X", 7, 0),
        ("X-------O-------O-------O-------O-------O-------O--------------- X", 0, 7),
        ("X-------X-------O-------O-------O-------O-------O--------------- X", 0, 7),
        ("X-------O-------X-------O-------O-------O-------O--------------- X", 0, 7),
        ("X-------O-------O-------X-------O-------O-------O--------------- X", 0, 7),
        ("X-------O-------O-------O-------X-------O-------O--------------- X", 0, 7),
        ("X-------O-------O-------O-------O-------X-------O--------------- X", 0, 7),
        ("X--------O--------O--------O--------O--------O--------O--------- X", 7, 7),
        ("-------X------O------O------O------O------O------O-------------- X", 0, 7),
        ("-------X------X------O------O------O------O------O-------------- X", 0, 7),
        ("-------X------O------X------O------O------O------O-------------- X", 0, 7),
        ("-------X------O------O------X------O------O------O-------------- X", 0, 7),
        ("-------X------O------O------O------X------O------O-------------- X", 0, 7),
        ("-------X------O------O------O------O------X------O-------------- X", 0, 7),
        ("--------------O------O------O------O------O------O------X------- X", 7, 0),
        ("--------------O------O------O------O------O------X------X------- X", 7, 0),
        ("--------------O------O------O------O------X------O------X------- X", 7, 0),
        ("--------------O------O------O------X------O------O------X------- X", 7, 0),
        ("--------------O------O------X------O------O------O------X------- X", 7, 0),
        ("--------------O------X------O------O------O------O------X------- X", 7, 0),
        ("-----------OOO---OOO-OO----OOO----O-O-O--O--O-------O-------X--- X", 4, 2),
        ("-----------OOO---OOO-OO----OOO----O-O-O--O--O---X---O----------- X", 4, 2),
        ("-----------OOO--XOOO-OO----OOO----O-O-O--O--O-------O----------- X", 4, 2),
        ("--X--------OOO---OOO-OO----OOO----O-O-O--O--O-------O----------- X", 4, 2),
        ("----X------OOO---OOO-OO----OOO----O-O-O--O--O-------O----------- X", 4, 2),
        ("------X----OOO---OOO-OO----OOO----O-O-O--O--O-------O----------- X", 4, 2),
        ("-----------OOO---OOO-OOX---OOO----O-O-O--O--O-------O----------- X", 4, 2),
        ("-----------OOO---OOO-OO----OOO----O-O-O--O--O--X----O----------- X", 4, 2),
        ("X-------OO-------OOOOOO-OO------O-O-----O--O----O---O----------- X", 0, 2),
        ("--X-----OO-------OOOOOO-OO------O-O-----O--O----O---O----------- X", 0, 2),
        ("--------OO-------OOOOOOXOO------O-O-----O--O----O---O----------- X", 0, 2),
        ("--------OO-------OOOOOO-OO------O-O-----O--O----O---O--------X-- X", 0, 2),
        ("--------OO-------OOOOOO-OO------O-O-----O--O----O---O---X------- X", 0, 2),
        ("--X------XOX-----X-X-----XXX------------------------------------ X", 2, 2),
        ("X--------OOO-----O-O-----OOO------------------------------------ X", 2, 2),
        ("---------OOO----XO-O-----OOO------------------------------------ X", 2, 2),
        ("---------OOO-----O-O-----OOO----X------------------------------- X", 2, 2),
        ("---------OOO-----O-O-----OOO--------X--------------------------- X", 2, 2),
        ("---------OOO-----O-OX----OOO------------------------------------ X", 2, 2),
        ("----X----OOO-----O-O-----OOO------------------------------------ X", 2, 2),
        ("--X------OOO-----O-OO----OOO------O-O--------------------------- X", 2, 2),
        ("X--------OOO-----O-OO----OOO------O-O--------------------------- X", 2, 2),
        ("---------OOO----XO-OO----OOO------O-O--------------------------- X", 2, 2),
        ("---------OOO-----O-OO----OOO----X-O-O--------------------------- X", 2, 2),
        ("---------OOO-----O-OO----OOO------O-O-----X--------------------- X", 2, 2),
        ("---------OOO-----O-OO----OOO------O-O--------X------------------ X", 2, 2),
        ("---------OOO-----O-OOX---OOO------O-O--------------------------- X", 2, 2),
        ("----X----OOO-----O-OO----OOO------O-O--------------------------- X", 2, 2),

        ("--X------OOO-----O-OOO---OOO------O-O-----O--O------------------ X", 2, 2),
        ("X--------OOO-----O-OOO---OOO------O-O-----O--O------------------ X", 2, 2),
        ("---------OOO----XO-OOO---OOO------O-O-----O--O------------------ X", 2, 2),
        ("---------OOO-----O-OOO---OOO----X-O-O-----O--O------------------ X", 2, 2),
        ("---------OOO-----O-OOO---OOO------O-O-----O--O----X------------- X", 2, 2),
        ("---------OOO-----O-OOO---OOO------O-O-----O--O--------X--------- X", 2, 2),
        ("---------OOO-----O-OOOX--OOO------O-O-----O--O------------------ X", 2, 2),
        ("----X----OOO-----O-OOO---OOO------O-O-----O--O------------------ X", 2, 2),

        ("--X------OOO-----O-OOOO--OOO------O-O-----O--O----O---O--------- X", 2, 2),
        ("X--------OOO-----O-OOOO--OOO------O-O-----O--O----O---O--------- X", 2, 2),
        ("---------OOO----XO-OOOO--OOO------O-O-----O--O----O---O--------- X", 2, 2),
        ("---------OOO-----O-OOOO--OOO----X-O-O-----O--O----O---O--------- X", 2, 2),
        ("---------OOO-----O-OOOO--OOO------O-O-----O--O----O---O---X----- X", 2, 2),
        ("---------OOO-----O-OOOO--OOO------O-O-----O--O----O---O--------X X", 2, 2),
        ("---------OOO-----O-OOOOX-OOO------O-O-----O--O----O---O--------- X", 2, 2),
        ("----X----OOO-----O-OOOO--OOO------O-O-----O--O----O---O--------- X", 2, 2),
    ];
    for (obf, x, y) in revchktbl {
        println!("obf:{obf}");
        let b = BitBoard::from_obf(obf).unwrap();
        // assert!(b.checkreverse1(x, y));
        // assert!(b.checkreverse2(x, y));
        assert!(b.checkreverse(BitBoard::index(x, y)));
        // assert!(b.checkreverse4(x, y));
        let b = b.rotate180();
        // assert!(b.checkreverse1(NUMCELL - 1 - x, NUMCELL - 1 - y));
        // assert!(b.checkreverse2(NUMCELL - 1 - x, NUMCELL - 1 - y));
        assert!(b.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 1 - y)));
        // assert!(b.checkreverse4(NUMCELL - 1 - x, NUMCELL - 1 - y));
    }
    for y in 1..NUMCELL - 1 {
        for x in 1..NUMCELL - 1 {
            let mut b = BitBoard::from_obf(
                "XXXXXXXXXOOOOOOXXOOOOOOXXOOOOOOXXOOOOOOXXOOOOOOXXOOOOOOXXXXXXXXX X").unwrap();
            let bit = LSB_CELL << BitBoard::index(x, y);
            let mask = !bit;
            b.white &= mask;
            // assert!(b.checkreverse1(x, y));
            // assert!(b.checkreverse2(x, y));
            assert!(b.checkreverse(BitBoard::index(x, y)));
            // assert!(b.checkreverse4(x, y));
        }
    }
    let revchktbl = [
        ("---------------------------------------------------------------- X", 2, 2),
        ("XXXXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX X", 2, 2),
        ("OOOOOOOOOOOOOOOOOO-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO X", 2, 2),
        ("XXXXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX X", 2, 2),
        ("---------OOOOOO--O-OOOO--OOOOOO--OOOOOO--OOOOOO--OOOOOO--------- X", 2, 2),
        ("---------OOO-----O-O-----OOO------------------------------------ X", 2, 2),
        ("---------OOO-----O-OO----OOO------O-O--------------------------- X", 2, 2),
        ("---------OOO-----O-OOO---OOO------O-O-----O--O------------------ X", 2, 2),
        ("---------XXX-----X-X-----XXX------------------------------------ X", 2, 2),
        ("---------XXX-----X-XX----XXX------X-X--------------------------- X", 2, 2),
        ("---------XXX-----X-XXX---XXX------X-X-----X--X------------------ X", 2, 2),
        ("-X-------------------------------------------------------------- X", 0, 0),
        ("------X--------------------------------------------------------- X", 7, 0),
        ("--------X------------------------------------------------------- X", 0, 0),
        ("---------X--------O--------O--------O--------O--------O--------X X", 0, 0),
        ("X-------O-------O-------O-------O-------O-------X--------------- X", 0, 7),
        ("-------X------O------O------O------O------O------X-------------- X", 0, 7),
        ("--------------X------O------O------O------O------O------X------- X", 7, 0),
    ];
    for (obf, x, y) in revchktbl {
        let b = BitBoard::from_obf(obf).unwrap();
        // assert!(!b.checkreverse1(x, y));
        // assert!(!b.checkreverse2(x, y));
        assert!(!b.checkreverse(BitBoard::index(x, y)));
        // assert!(!b.checkreverse4(x, y));
        let b = b.rotate180();
        // assert!(!b.checkreverse1(NUMCELL - 1 - x, NUMCELL - 1 - y));
        // assert!(!b.checkreverse2(NUMCELL - 1 - x, NUMCELL - 1 - y));
        assert!(!b.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 1 - y)));
        // assert!(!b.checkreverse4(NUMCELL - 1 - x, NUMCELL - 1 - y));
    }
    for y in 0..NUMCELL {
        for x in 0..NUMCELL {
            let b = BitBoard::from_obf(
                "---------------------------------------------------------------- X").unwrap();
            // assert!(!b.checkreverse1(x, y));
            // assert!(!b.checkreverse2(x, y));
            assert!(!b.checkreverse(BitBoard::index(x, y)));
            // assert!(!b.checkreverse4(x, y));
            let mut b = BitBoard::from_obf(
                "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX X").unwrap();
            let bit = LSB_CELL << BitBoard::index(x, y);
            let mask = !bit;
            b.black &= mask;
            // assert!(!b.checkreverse1(x, y));
            // assert!(!b.checkreverse2(x, y));
            assert!(!b.checkreverse(BitBoard::index(x, y)));
            // assert!(!b.checkreverse4(x, y));

            let mut b = BitBoard::from_obf(
                "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO X").unwrap();
            b.white &= mask;
            // assert!(!b.checkreverse1(x, y));
            // assert!(!b.checkreverse2(x, y));
            assert!(!b.checkreverse(BitBoard::index(x, y)));
            // assert!(!b.checkreverse4(x, y));
        }
    }

    let revchktbl = [
        "8/8/8/8/8/8/H/h w", "8/8/8/8/8/H/H/h w", "8/8/8/8/H/H/H/h w",
        "8/8/8/H/H/H/H/h w", "8/8/H/H/H/H/H/h w", "8/H/H/H/H/H/H/h w",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        for x in 1..=NUMCELL {
            print!("({x}{})", NUMCELL - 2 - y);
            let ban = ban.r#move(BitBoard::cell(x as u8, (NUMCELL - 2 - y) as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((x - 1) as u8, (NUMCELL - 1 - yy) as u8), GOTE);
            }
        }
        let ban90 = ban.rotate90();
        for x in 1..=NUMCELL {
            print!("({}{x})", NUMCELL - 2 - y);
            let ban = ban90.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, x as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((NUMCELL - 2 - 1 - yy) as u8, (x - 1) as u8), GOTE);
            }
        }
        let ban180 = ban.rotate180();
        for x in 1..=NUMCELL {
            print!("({x}{})", y + 3);
            let ban = ban180.r#move(BitBoard::cell(x as u8, (y + 3) as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((x - 1) as u8, (yy + 2) as u8), GOTE);
            }
        }
        let banm90 = ban180.rotate90();
        for x in 1..=NUMCELL {
            print!("({}{x})", y + 3);
            let ban = banm90.r#move(BitBoard::cell((y + 3) as u8, x as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((yy + 2) as u8, (x - 1) as u8), GOTE);
            }
        }
    }
    let revchktbl = [
        "8/8/8/8/8/8/h/H b", "8/8/8/8/8/h/h/H b", "8/8/8/8/h/h/h/H b",
        "8/8/8/h/h/h/h/H b", "8/8/h/h/h/h/h/H b", "8/h/h/h/h/h/h/H b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        for x in 1..=NUMCELL {
            print!("({x}{})", NUMCELL - 2 - y);
            assert!(ban.checkreverse(BitBoard::index(x - 1, NUMCELL - 2 - 1 - y)));
            let ban = ban.r#move(BitBoard::cell(x as u8, (NUMCELL - 2 - y) as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((x - 1) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
            }
        }
        let ban90 = ban.rotate90();
        for x in 1..=NUMCELL {
            print!("({}{x})", NUMCELL - 2 - y);
            assert!(ban90.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x - 1)));
            let ban = ban90.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, x as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((NUMCELL - 2 - 1 - yy) as u8, (x - 1) as u8), SENTE);
            }
        }
        let ban180 = ban.rotate180();
        for x in 1..=NUMCELL {
            print!("({x}{})", y + 3);
            assert!(ban180.checkreverse(BitBoard::index(x - 1, y + 2)));
            let ban = ban180.r#move(BitBoard::cell(x as u8, (y + 3) as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((x - 1) as u8, (yy + 2) as u8), SENTE);
            }
        }
        let banm90 = ban180.rotate90();
        for x in 1..=NUMCELL {
            print!("({}{x})", y + 3);
            assert!(banm90.checkreverse(BitBoard::index(y + 2, x - 1)));
            let ban = banm90.r#move(BitBoard::cell((y + 3) as u8, x as u8)).unwrap();
            ban.put();
            for yy in 0..y {
                assert_eq!(ban.at((yy + 2) as u8, (x - 1) as u8), SENTE);
            }
        }
    }
    let revchktbl = [
        "8/8/8/8/8/8/8/6aA b", "8/8/8/8/8/8/8/5bA b", "8/8/8/8/8/8/8/4cA b",
        "8/8/8/8/8/8/8/3dA b", "8/8/8/8/8/8/8/2eA b", "8/8/8/8/8/8/8/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/8/6aA/8 b", "8/8/8/8/8/8/5bA/8 b", "8/8/8/8/8/8/4cA/8 b",
        "8/8/8/8/8/8/3dA/8 b", "8/8/8/8/8/8/2eA/8 b", "8/8/8/8/8/8/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/6aA/8/8 b", "8/8/8/8/8/5bA/8/8 b", "8/8/8/8/8/4cA/8/8 b",
        "8/8/8/8/8/3dA/8/8 b", "8/8/8/8/8/2eA/8/8 b", "8/8/8/8/8/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/6aA/8/8/8 b", "8/8/8/8/5bA/8/8/8 b", "8/8/8/8/4cA/8/8/8 b",
        "8/8/8/8/3dA/8/8/8 b", "8/8/8/8/2eA/8/8/8 b", "8/8/8/8/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/6aA/8/8/8/8 b", "8/8/8/5bA/8/8/8/8 b", "8/8/8/4cA/8/8/8/8 b",
        "8/8/8/3dA/8/8/8/8 b", "8/8/8/2eA/8/8/8/8 b", "8/8/8/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/6aA/8/8/8/8/8 b", "8/8/5bA/8/8/8/8/8 b", "8/8/4cA/8/8/8/8/8 b",
        "8/8/3dA/8/8/8/8/8 b", "8/8/2eA/8/8/8/8/8 b", "8/8/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/6aA/8/8/8/8/8/8 b", "8/5bA/8/8/8/8/8/8 b", "8/4cA/8/8/8/8/8/8 b",
        "8/3dA/8/8/8/8/8/8 b", "8/2eA/8/8/8/8/8/8 b", "8/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "6aA/8/8/8/8/8/8/8 b", "5bA/8/8/8/8/8/8/8 b", "4cA/8/8/8/8/8/8/8 b",
        "3dA/8/8/8/8/8/8/8 b", "2eA/8/8/8/8/8/8/8 b", "1fA/8/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "7A/6a1/8/8/8/8/8/8 b",
        "7A/6a1/5a2/8/8/8/8/8 b",
        "7A/6a1/5a2/4a3/8/8/8/8 b",
        "7A/6a1/5a2/4a3/3a4/8/8/8 b",
        "7A/6a1/5a2/4a3/3a4/2a5/8/8 b",
        "7A/6a1/5a2/4a3/3a4/2a5/1a6/8 b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, y + 2);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, y + 2)));
        ban.put();
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (y + 3) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            print!("{}{yy},", NUMCELL - 1 - yy);
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", y + 3, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(y + 2, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((y + 3) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - 2 - y);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 2 - 1 - y)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - 2 - y, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/5A2/6a1/8 b",
        "8/8/8/8/4A3/5a2/6a1/8 b",
        "8/8/8/3A4/4a3/5a2/6a1/8 b",
        "8/8/2A5/3a4/4a3/5a2/6a1/8 b",
        "8/1A6/2a5/3a4/4a3/5a2/6a1/8 b",
        "A7/1a6/2a5/3a4/4a3/5a2/6a1/8 b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({NUMCELL}{NUMCELL})");
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 1, NUMCELL - 1)));
        ban.put();
        let ban = ban.r#move(BitBoard::cell(NUMCELL as u8, NUMCELL as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({NUMCELL}1");
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(NUMCELL - 1, 0)));
        let ban = ban90.r#move(BitBoard::cell(NUMCELL as u8, 1)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("(11)");
        assert!(ban180.checkreverse(BitBoard::index(0, 0)));
        let ban = ban180.r#move(BitBoard::cell(1, 1)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("(1{NUMCELL})");
        assert!(banm90.checkreverse(BitBoard::index(0, NUMCELL - 1)));
        let ban = banm90.r#move(BitBoard::cell(1, NUMCELL as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/8/6aA/6aA b", "8/8/8/8/8/8/5bA/5bA b",
        "8/8/8/8/8/8/4cA/4cA b", "8/8/8/8/8/8/3dA/3dA b",
        "8/8/8/8/8/8/2eA/2eA b", "8/8/8/8/8/8/1fA/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/6aA/6aA/8 b", "8/8/8/8/8/5bA/5bA/8 b",
        "8/8/8/8/8/4cA/4cA/8 b", "8/8/8/8/8/3dA/3dA/8 b",
        "8/8/8/8/8/2eA/2eA/8 b", "8/8/8/8/8/1fA/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/6aA/6aA/8/8 b", "8/8/8/8/5bA/5bA/8/8 b",
        "8/8/8/8/4cA/4cA/8/8 b", "8/8/8/8/3dA/3dA/8/8 b",
        "8/8/8/8/2eA/2eA/8/8 b", "8/8/8/8/1fA/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/6aA/6aA/8/8/8 b", "8/8/8/5bA/5bA/8/8/8 b",
        "8/8/8/4cA/4cA/8/8/8 b", "8/8/8/3dA/3dA/8/8/8 b",
        "8/8/8/2eA/2eA/8/8/8 b", "8/8/8/1fA/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/6aA/6aA/8/8/8/8 b", "8/8/5bA/5bA/8/8/8/8 b",
        "8/8/4cA/4cA/8/8/8/8 b", "8/8/3dA/3dA/8/8/8/8 b",
        "8/8/2eA/2eA/8/8/8/8 b", "8/8/1fA/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/6aA/6aA/8/8/8/8/8 b", "8/5bA/5bA/8/8/8/8/8 b",
        "8/4cA/4cA/8/8/8/8/8 b", "8/3dA/3dA/8/8/8/8/8 b",
        "8/2eA/2eA/8/8/8/8/8 b", "8/1fA/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "6aA/6aA/8/8/8/8/8/8 b", "5bA/5bA/8/8/8/8/8/8 b",
        "4cA/4cA/8/8/8/8/8/8 b", "3dA/3dA/8/8/8/8/8/8 b",
        "2eA/2eA/8/8/8/8/8/8 b", "1fA/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "6aA/8/8/8/8/8/8/6aA b", "5bA/8/8/8/8/8/8/5bA b",
        "4cA/8/8/8/8/8/8/4cA b", "3dA/8/8/8/8/8/8/3dA b",
        "2eA/8/8/8/8/8/8/2eA b", "1fA/8/8/8/8/8/8/1fA b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "6aA/8/8/8/8/8/8/6aA b", "5bA/8/8/8/8/8/8/5bA b",
        "4cA/8/8/8/8/8/8/4cA b", "3dA/8/8/8/8/8/8/3dA b",
        "2eA/8/8/8/8/8/8/2eA b", "1fA/8/8/8/8/8/8/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/8/6aA/6aA b", "8/8/8/8/8/8/5bA/5bA b",
        "8/8/8/8/8/8/4cA/4cA b", "8/8/8/8/8/8/3dA/3dA b",
        "8/8/8/8/8/8/2eA/2eA b", "8/8/8/8/8/8/1fA/1fA b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/6aA/6aA/8 b", "8/8/8/8/8/5bA/5bA/8 b",
        "8/8/8/8/8/4cA/4cA/8 b", "8/8/8/8/8/3dA/3dA/8 b",
        "8/8/8/8/8/2eA/2eA/8 b", "8/8/8/8/8/1fA/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/6aA/6aA/8/8 b", "8/8/8/8/5bA/5bA/8/8 b",
        "8/8/8/8/4cA/4cA/8/8 b", "8/8/8/8/3dA/3dA/8/8 b",
        "8/8/8/8/2eA/2eA/8/8 b", "8/8/8/8/1fA/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/6aA/6aA/8/8/8 b", "8/8/8/5bA/5bA/8/8/8 b",
        "8/8/8/4cA/4cA/8/8/8 b", "8/8/8/3dA/3dA/8/8/8 b",
        "8/8/8/2eA/2eA/8/8/8 b", "8/8/8/1fA/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/6aA/6aA/8/8/8/8 b", "8/8/5bA/5bA/8/8/8/8 b",
        "8/8/4cA/4cA/8/8/8/8 b", "8/8/3dA/3dA/8/8/8/8 b",
        "8/8/2eA/2eA/8/8/8/8 b", "8/8/1fA/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/6aA/6aA/8/8/8/8/8 b", "8/5bA/5bA/8/8/8/8/8 b",
        "8/4cA/4cA/8/8/8/8/8 b", "8/3dA/3dA/8/8/8/8/8 b",
        "8/2eA/2eA/8/8/8/8/8 b", "8/1fA/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "6aA/6aA/8/8/8/8/8/8 b", "5bA/5bA/8/8/8/8/8/8 b",
        "4cA/4cA/8/8/8/8/8/8 b", "3dA/3dA/8/8/8/8/8/8 b",
        "2eA/2eA/8/8/8/8/8/8 b", "1fA/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
//------------------------------------
    let revchktbl = [
        "8/8/8/8/8/8/8/E1aA b", "8/8/8/8/8/8/8/D1bA b", "8/8/8/8/8/8/8/C1cA b",
        "8/8/8/8/8/8/8/B1dA b", "8/8/8/8/8/8/8/A1eA b", "8/8/8/8/8/8/8/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/8/E1aA/8 b", "8/8/8/8/8/8/D1bA/8 b", "8/8/8/8/8/8/C1cA/8 b",
        "8/8/8/8/8/8/B1dA/8 b", "8/8/8/8/8/8/A1eA/8 b", "8/8/8/8/8/8/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/E1aA/8/8 b", "8/8/8/8/8/D1bA/8/8 b", "8/8/8/8/8/C1cA/8/8 b",
        "8/8/8/8/8/B1dA/8/8 b", "8/8/8/8/8/A1eA/8/8 b", "8/8/8/8/8/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/E1aA/8/8/8 b", "8/8/8/8/D1bA/8/8/8 b", "8/8/8/8/C1cA/8/8/8 b",
        "8/8/8/8/B1dA/8/8/8 b", "8/8/8/8/A1eA/8/8/8 b", "8/8/8/8/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/E1aA/8/8/8/8 b", "8/8/8/D1bA/8/8/8/8 b", "8/8/8/C1cA/8/8/8/8 b",
        "8/8/8/B1dA/8/8/8/8 b", "8/8/8/A1eA/8/8/8/8 b", "8/8/8/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/E1aA/8/8/8/8/8 b", "8/8/D1bA/8/8/8/8/8 b", "8/8/C1cA/8/8/8/8/8 b",
        "8/8/B1dA/8/8/8/8/8 b", "8/8/A1eA/8/8/8/8/8 b", "8/8/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/E1aA/8/8/8/8/8/8 b", "8/D1bA/8/8/8/8/8/8 b", "8/C1cA/8/8/8/8/8/8 b",
        "8/B1dA/8/8/8/8/8/8 b", "8/A1eA/8/8/8/8/8/8 b", "8/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "E1aA/8/8/8/8/8/8/8 b", "D1bA/8/8/8/8/8/8/8 b", "C1cA/8/8/8/8/8/8/8 b",
        "B1dA/8/8/8/8/8/8/8 b", "A1eA/8/8/8/8/8/8/8 b", "1fA/8/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "7A/6a1/8/4A3/3A4/2A5/1A6/A7 b",
        "7A/6a1/5a2/8/3A4/2A5/1A6/A7 b",
        "7A/6a1/5a2/4a3/8/2A5/1A6/A7 b",
        "7A/6a1/5a2/4a3/3a4/8/1A6/A7 b",
        "7A/6a1/5a2/4a3/3a4/2a5/8/A7 b",
        "7A/6a1/5a2/4a3/3a4/2a5/1a6/8 b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, y + 2);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, y + 2)));
        ban.put();
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (y + 3) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            print!("{}{},", NUMCELL - 1 - yy, yy);
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", y + 3, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(y + 2, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((y + 3) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - 2 - y);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 2 - 1 - y)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - 2 - y, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "A7/1A6/2A5/3A4/4A3/5A2/6a1/8 b",
        "A7/1A6/2A5/3A4/4A3/5a2/6a1/8 b",
        "A7/1A6/2A5/3A4/4a3/5a2/6a1/8 b",
        "A7/1A6/2A5/3a4/4a3/5a2/6a1/8 b",
        "A7/1A6/2a5/3a4/4a3/5a2/6a1/8 b",
        "A7/1a6/2a5/3a4/4a3/5a2/6a1/8 b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({NUMCELL}{NUMCELL})");
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 1, NUMCELL - 1)));
        ban.put();
        let ban = ban.r#move(BitBoard::cell(NUMCELL as u8, NUMCELL as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({NUMCELL}1)");
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(NUMCELL - 1, 0)));
        let ban = ban90.r#move(BitBoard::cell(NUMCELL as u8, 1)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("(11)");
        assert!(ban180.checkreverse(BitBoard::index(0, 0)));
        let ban = ban180.r#move(BitBoard::cell(1, 1)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
        let banm90 = ban180.rotate90();
        print!("(1{NUMCELL})");
        assert!(banm90.checkreverse(BitBoard::index(0, NUMCELL - 1)));
        let ban = banm90.r#move(BitBoard::cell(1, NUMCELL as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), 8);
        assert_eq!(ban.white.count_ones(), 0);
    }
    let revchktbl = [
        "8/8/8/8/8/8/E1aA/E1aA b", "8/8/8/8/8/8/D1bA/D1bA b",
        "8/8/8/8/8/8/C1cA/C1cA b", "8/8/8/8/8/8/B1dA/B1dA b",
        "8/8/8/8/8/8/A1eA/A1eA b", "8/8/8/8/8/8/1fA/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/E1aA/E1aA/8 b", "8/8/8/8/8/D1bA/D1bA/8 b",
        "8/8/8/8/8/C1cA/C1cA/8 b", "8/8/8/8/8/B1dA/B1dA/8 b",
        "8/8/8/8/8/A1eA/A1eA/8 b", "8/8/8/8/8/1fA/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/E1aA/E1aA/8/8 b", "8/8/8/8/D1bA/D1bA/8/8 b",
        "8/8/8/8/C1cA/C1cA/8/8 b", "8/8/8/8/B1dA/B1dA/8/8 b",
        "8/8/8/8/A1eA/A1eA/8/8 b", "8/8/8/8/1fA/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/E1aA/E1aA/8/8/8 b", "8/8/8/D1bA/D1bA/8/8/8 b",
        "8/8/8/C1cA/C1cA/8/8/8 b", "8/8/8/B1dA/B1dA/8/8/8 b",
        "8/8/8/A1eA/A1eA/8/8/8 b", "8/8/8/1fA/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/E1aA/E1aA/8/8/8/8 b", "8/8/D1bA/D1bA/8/8/8/8 b",
        "8/8/C1cA/C1cA/8/8/8/8 b", "8/8/B1dA/B1dA/8/8/8/8 b",
        "8/8/A1eA/A1eA/8/8/8/8 b", "8/8/1fA/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/E1aA/E1aA/8/8/8/8/8 b", "8/D1bA/D1bA/8/8/8/8/8 b",
        "8/C1cA/C1cA/8/8/8/8/8 b", "8/B1dA/B1dA/8/8/8/8/8 b",
        "8/A1eA/A1eA/8/8/8/8/8 b", "8/1fA/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "E1aA/E1aA/8/8/8/8/8/8 b", "D1bA/D1bA/8/8/8/8/8/8 b",
        "C1cA/C1cA/8/8/8/8/8/8 b", "B1dA/B1dA/8/8/8/8/8/8 b",
        "A1eA/A1eA/8/8/8/8/8/8 b", "1fA/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "E1aA/8/8/8/8/8/8/E1aA b", "D1bA/8/8/8/8/8/8/D1bA b",
        "C1cA/8/8/8/8/8/8/C1cA b", "B1dA/8/8/8/8/8/8/B1dA b",
        "A1eA/8/8/8/8/8/8/A1eA b", "1fA/8/8/8/8/8/8/1fA b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "E1aA/8/8/8/8/8/8/E1aA b", "D1bA/8/8/8/8/8/8/D1bA b",
        "C1cA/8/8/8/8/8/8/C1cA b", "B1dA/8/8/8/8/8/8/B1dA b",
        "A1eA/8/8/8/8/8/8/A1eA b", "1fA/8/8/8/8/8/8/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/8/E1aA/E1aA b", "8/8/8/8/8/8/D1bA/D1bA b",
        "8/8/8/8/8/8/C1cA/C1cA b", "8/8/8/8/8/8/B1dA/B1dA b",
        "8/8/8/8/8/8/A1eA/A1eA b", "8/8/8/8/8/8/1fA/1fA b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/E1aA/E1aA/8 b", "8/8/8/8/8/D1bA/D1bA/8 b",
        "8/8/8/8/8/C1cA/C1cA/8 b", "8/8/8/8/8/B1dA/B1dA/8 b",
        "8/8/8/8/8/A1eA/A1eA/8 b", "8/8/8/8/8/1fA/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/8/E1aA/E1aA/8/8 b", "8/8/8/8/D1bA/D1bA/8/8 b",
        "8/8/8/8/C1cA/C1cA/8/8 b", "8/8/8/8/B1dA/B1dA/8/8 b",
        "8/8/8/8/A1eA/A1eA/8/8 b", "8/8/8/8/1fA/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/8/E1aA/E1aA/8/8/8 b", "8/8/8/D1bA/D1bA/8/8/8 b",
        "8/8/8/C1cA/C1cA/8/8/8 b", "8/8/8/B1dA/B1dA/8/8/8 b",
        "8/8/8/A1eA/A1eA/8/8/8 b", "8/8/8/1fA/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/8/E1aA/E1aA/8/8/8/8 b", "8/8/D1bA/D1bA/8/8/8/8 b",
        "8/8/C1cA/C1cA/8/8/8/8 b", "8/8/B1dA/B1dA/8/8/8/8 b",
        "8/8/A1eA/A1eA/8/8/8/8 b", "8/8/1fA/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "8/E1aA/E1aA/8/8/8/8/8 b", "8/D1bA/D1bA/8/8/8/8/8 b",
        "8/C1cA/C1cA/8/8/8/8/8 b", "8/B1dA/B1dA/8/8/8/8/8 b",
        "8/A1eA/A1eA/8/8/8/8/8 b", "8/1fA/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
    let revchktbl = [
        "E1aA/E1aA/8/8/8/8/8/8 b", "D1bA/D1bA/8/8/8/8/8/8 b",
        "C1cA/C1cA/8/8/8/8/8/8 b", "B1dA/B1dA/8/8/8/8/8/8 b",
        "A1eA/A1eA/8/8/8/8/8/8 b", "1fA/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (NUMCELL * 2 - 2 - y) as u32);
        assert_eq!(ban.white.count_ones(), (y + 1) as u32);
    }
//------------------------------------
    let revchktbl = [
        "8/8/8/8/8/8/8/e1aA b", "8/8/8/8/8/8/8/d1bA b", "8/8/8/8/8/8/8/c1cA b",
        "8/8/8/8/8/8/8/b1dA b", "8/8/8/8/8/8/8/a1eA b", "8/8/8/8/8/8/8/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/8/e1aA/8 b", "8/8/8/8/8/8/d1bA/8 b", "8/8/8/8/8/8/c1cA/8 b",
        "8/8/8/8/8/8/b1dA/8 b", "8/8/8/8/8/8/a1eA/8 b", "8/8/8/8/8/8/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/e1aA/8/8 b", "8/8/8/8/8/d1bA/8/8 b", "8/8/8/8/8/c1cA/8/8 b",
        "8/8/8/8/8/b1dA/8/8 b", "8/8/8/8/8/a1eA/8/8 b", "8/8/8/8/8/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/e1aA/8/8/8 b", "8/8/8/8/d1bA/8/8/8 b", "8/8/8/8/c1cA/8/8/8 b",
        "8/8/8/8/b1dA/8/8/8 b", "8/8/8/8/a1eA/8/8/8 b", "8/8/8/8/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/e1aA/8/8/8/8 b", "8/8/8/d1bA/8/8/8/8 b", "8/8/8/c1cA/8/8/8/8 b",
        "8/8/8/b1dA/8/8/8/8 b", "8/8/8/a1eA/8/8/8/8 b", "8/8/8/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/8/e1aA/8/8/8/8/8 b", "8/8/d1bA/8/8/8/8/8 b", "8/8/c1cA/8/8/8/8/8 b",
        "8/8/b1dA/8/8/8/8/8 b", "8/8/a1eA/8/8/8/8/8 b", "8/8/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/e1aA/8/8/8/8/8/8 b", "8/d1bA/8/8/8/8/8/8 b", "8/c1cA/8/8/8/8/8/8 b",
        "8/b1dA/8/8/8/8/8/8 b", "8/a1eA/8/8/8/8/8/8 b", "8/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "e1aA/8/8/8/8/8/8/8 b", "d1bA/8/8/8/8/8/8/8 b", "c1cA/8/8/8/8/8/8/8 b",
        "b1dA/8/8/8/8/8/8/8 b", "a1eA/8/8/8/8/8/8/8 b", "1fA/8/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "7A/6a1/8/4a3/3a4/2a5/1a6/a7 b", "7A/6a1/5a2/8/3a4/2a5/1a6/a7 b",
        "7A/6a1/5a2/4a3/8/2a5/1a6/a7 b", "7A/6a1/5a2/4a3/3a4/8/1a6/a7 b",
        "7A/6a1/5a2/4a3/3a4/2a5/8/a7 b", "7A/6a1/5a2/4a3/3a4/2a5/1a6/8 b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, y + 2);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, y + 2)));
        ban.put();
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (y + 3) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            print!("{}{},", NUMCELL - 1 - yy, yy);
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", y + 3, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(y + 2, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((y + 3) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - 2 - y);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 2 - 1 - y)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - 2 - y, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "a7/1a6/2a5/3a4/4a3/5A2/6a1/8 b", "a7/1a6/2a5/3a4/4A3/5a2/6a1/8 b",
        "a7/1a6/2a5/3A4/4a3/5a2/6a1/8 b", "a7/1a6/2A5/3a4/4a3/5a2/6a1/8 b",
        "a7/1A6/2a5/3a4/4a3/5a2/6a1/8 b", "A7/1a6/2a5/3a4/4a3/5a2/6a1/8 b",
    ];
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({NUMCELL}{NUMCELL})");
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 1, NUMCELL - 1)));
        ban.put();
        let ban = ban.r#move(BitBoard::cell(NUMCELL as u8, NUMCELL as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({NUMCELL}1)");
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(NUMCELL - 1, 0)));
        let ban = ban90.r#move(BitBoard::cell(NUMCELL as u8, 1u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("(11)");
        assert!(ban180.checkreverse(BitBoard::index(0, 0)));
        let ban = ban180.r#move(BitBoard::cell(1, 1)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("(1{NUMCELL})");
        assert!(banm90.checkreverse(BitBoard::index(0, NUMCELL - 1)));
        let ban = banm90.r#move(BitBoard::cell(1, NUMCELL as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 3) as u32);
        assert_eq!(ban.white.count_ones(), (NUMCELL - 3 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/8/e1aA/e1aA b", "8/8/8/8/8/8/d1bA/d1bA b",
        "8/8/8/8/8/8/c1cA/c1cA b", "8/8/8/8/8/8/b1dA/b1dA b",
        "8/8/8/8/8/8/a1eA/a1eA b", "8/8/8/8/8/8/1fA/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/e1aA/e1aA/8 b", "8/8/8/8/8/d1bA/d1bA/8 b",
        "8/8/8/8/8/c1cA/c1cA/8 b", "8/8/8/8/8/b1dA/b1dA/8 b",
        "8/8/8/8/8/a1eA/a1eA/8 b", "8/8/8/8/8/1fA/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/e1aA/e1aA/8/8 b", "8/8/8/8/d1bA/d1bA/8/8 b",
        "8/8/8/8/c1cA/c1cA/8/8 b", "8/8/8/8/b1dA/b1dA/8/8 b",
        "8/8/8/8/a1eA/a1eA/8/8 b", "8/8/8/8/1fA/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/e1aA/e1aA/8/8/8 b", "8/8/8/d1bA/d1bA/8/8/8 b",
        "8/8/8/c1cA/c1cA/8/8/8 b", "8/8/8/b1dA/b1dA/8/8/8 b",
        "8/8/8/a1eA/a1eA/8/8/8 b", "8/8/8/1fA/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/e1aA/e1aA/8/8/8/8 b", "8/8/d1bA/d1bA/8/8/8/8 b",
        "8/8/c1cA/c1cA/8/8/8/8 b", "8/8/b1dA/b1dA/8/8/8/8 b",
        "8/8/a1eA/a1eA/8/8/8/8 b", "8/8/1fA/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/e1aA/e1aA/8/8/8/8/8 b", "8/d1bA/d1bA/8/8/8/8/8 b",
        "8/c1cA/c1cA/8/8/8/8/8 b", "8/b1dA/b1dA/8/8/8/8/8 b",
        "8/a1eA/a1eA/8/8/8/8/8 b", "8/1fA/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "e1aA/e1aA/8/8/8/8/8/8 b", "d1bA/d1bA/8/8/8/8/8/8 b",
        "c1cA/c1cA/8/8/8/8/8/8 b", "b1dA/b1dA/8/8/8/8/8/8 b",
        "a1eA/a1eA/8/8/8/8/8/8 b", "1fA/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "e1aA/8/8/8/8/8/8/e1aA b", "d1bA/8/8/8/8/8/8/d1bA b",
        "c1cA/8/8/8/8/8/8/c1cA b", "b1dA/8/8/8/8/8/8/b1dA b",
        "a1eA/8/8/8/8/8/8/a1eA b", "1fA/8/8/8/8/8/8/1fA b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "e1aA/8/8/8/8/8/8/e1aA b", "d1bA/8/8/8/8/8/8/d1bA b",
        "c1cA/8/8/8/8/8/8/c1cA b", "b1dA/8/8/8/8/8/8/b1dA b",
        "a1eA/8/8/8/8/8/8/a1eA b", "1fA/8/8/8/8/8/8/1fA b",
    ];
    let x = 7;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/8/e1aA/e1aA b", "8/8/8/8/8/8/d1bA/d1bA b",
        "8/8/8/8/8/8/c1cA/c1cA b", "8/8/8/8/8/8/b1dA/b1dA b",
        "8/8/8/8/8/8/a1eA/a1eA b", "8/8/8/8/8/8/1fA/1fA b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        ban.put();
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/8/e1aA/e1aA/8 b", "8/8/8/8/8/d1bA/d1bA/8 b",
        "8/8/8/8/8/c1cA/c1cA/8 b", "8/8/8/8/8/b1dA/b1dA/8 b",
        "8/8/8/8/8/a1eA/a1eA/8 b", "8/8/8/8/8/1fA/1fA/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/8/e1aA/e1aA/8/8 b", "8/8/8/8/d1bA/d1bA/8/8 b",
        "8/8/8/8/c1cA/c1cA/8/8 b", "8/8/8/8/b1dA/b1dA/8/8 b",
        "8/8/8/8/a1eA/a1eA/8/8 b", "8/8/8/8/1fA/1fA/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/8/e1aA/e1aA/8/8/8 b", "8/8/8/d1bA/d1bA/8/8/8 b",
        "8/8/8/c1cA/c1cA/8/8/8 b", "8/8/8/b1dA/b1dA/8/8/8 b",
        "8/8/8/a1eA/a1eA/8/8/8 b", "8/8/8/1fA/1fA/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/8/e1aA/e1aA/8/8/8/8 b", "8/8/d1bA/d1bA/8/8/8/8 b",
        "8/8/c1cA/c1cA/8/8/8/8 b", "8/8/b1dA/b1dA/8/8/8/8 b",
        "8/8/a1eA/a1eA/8/8/8/8 b", "8/8/1fA/1fA/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "8/e1aA/e1aA/8/8/8/8/8 b", "8/d1bA/d1bA/8/8/8/8/8 b",
        "8/c1cA/c1cA/8/8/8/8/8 b", "8/b1dA/b1dA/8/8/8/8/8 b",
        "8/a1eA/a1eA/8/8/8/8/8 b", "8/1fA/1fA/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }
    let revchktbl = [
        "e1aA/e1aA/8/8/8/8/8/8 b", "d1bA/d1bA/8/8/8/8/8/8 b",
        "c1cA/c1cA/8/8/8/8/8/8 b", "b1dA/b1dA/8/8/8/8/8/8 b",
        "a1eA/a1eA/8/8/8/8/8/8 b", "1fA/1fA/8/8/8/8/8/8 b",
    ];
    let x = x - 1;
    for (y, revchk) in revchktbl.iter().enumerate().take(NUMCELL - 2) {
        let ban = BitBoard::from(revchk).unwrap();
        print!("({}{})", NUMCELL - 2 - y, x + 1);
        assert!(ban.checkreverse(BitBoard::index(NUMCELL - 2 - 1 - y, x)));
        let ban = ban.r#move(BitBoard::cell((NUMCELL - 2 - y) as u8, (x + 1) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - yy) as u8, x as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban90 = ban.rotate90();
        print!("({}{})", x + 1, y + 3);
        ban90.put();
        assert!(ban90.checkreverse(BitBoard::index(x, y + 2)));
        let ban = ban90.r#move(BitBoard::cell((x + 1) as u8, (y + 3) as u8)).unwrap();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(x as u8, yy as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let ban = BitBoard::from(revchktbl[y]).unwrap();
        let ban180 = ban.rotate180();
        print!("({}{})", y + 3, NUMCELL - x);
        assert!(ban180.checkreverse(BitBoard::index(y + 2, NUMCELL - 1 - x)));
        let ban = ban180.r#move(BitBoard::cell((y + 3) as u8, (NUMCELL - x) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at(yy as u8, (NUMCELL - 1 - x) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
        let banm90 = ban180.rotate90();
        print!("({}{})", NUMCELL - x, NUMCELL - 2 - y);
        assert!(banm90.checkreverse(BitBoard::index(NUMCELL - 1 - x, NUMCELL - 2 - 1 - y)));
        let ban = banm90.r#move(BitBoard::cell((NUMCELL - x) as u8, (NUMCELL - 2 - y) as u8)).unwrap();
        ban.put();
        for yy in 0..(y + 2) {
            assert_eq!(ban.at((NUMCELL - 1 - x) as u8, (NUMCELL - 1 - yy) as u8), SENTE);
        }
        assert_eq!(ban.black.count_ones(), (y + 4) as u32);
        assert_eq!(ban.white.count_ones(), (2 * NUMCELL - 5 - y) as u32);
    }

    let ban0 = BitBoard::from("7A/8/8/6a1/6a1/6a1/6a1/6a1 b").unwrap();
    ban0.put();
    assert!(!ban0.checkreverse(BitBoard::index(7 - 1, 3 - 1)));
    let ban = ban0.r#move(BitBoard::cell(7, 3)).unwrap();
    assert_eq!(ban.black.count_ones(), 2);
    assert_eq!(ban.white.count_ones(), 5);
    let ban90 = ban0.rotate90();
    assert!(!ban90.checkreverse(BitBoard::index(3 - 1, 2 - 1)));
    let ban = ban90.r#move(BitBoard::cell(3, 2)).unwrap();
    assert_eq!(ban.black.count_ones(), 2);
    assert_eq!(ban.white.count_ones(), 5);
    let ban180 = ban90.rotate90();
    assert!(!ban180.checkreverse(BitBoard::index(2 - 1, 6 - 1)));
    let ban = ban180.r#move(BitBoard::cell(2, 6)).unwrap();
    assert_eq!(ban.black.count_ones(), 2);
    assert_eq!(ban.white.count_ones(), 5);
    let banm90 = ban180.rotate90();
    assert!(!banm90.checkreverse(BitBoard::index(6 - 1, 7 - 1)));
    let ban = banm90.r#move(BitBoard::cell(6, 7)).unwrap();
    assert_eq!(ban.black.count_ones(), 2);
    assert_eq!(ban.white.count_ones(), 5);

    static TBLCHKREV_TEST : [(&str, bool);2187] = [
        ("-------", false), ("------X", false), ("------O", false), ("-----X-", false), ("-----XX", false), ("-----XO", true), ("-----O-", false), ("-----OX", false),
        ("-----OO", false), ("----X--", false), ("----X-X", false), ("----X-O", false), ("----XX-", false), ("----XXX", false), ("----XXO", true), ("----XO-", false),
        ("----XOX", false), ("----XOO", true), ("----O--", false), ("----O-X", false), ("----O-O", false), ("----OX-", false), ("----OXX", false), ("----OXO", true),
        ("----OO-", false), ("----OOX", false), ("----OOO", false), ("---X---", false), ("---X--X", false), ("---X--O", false), ("---X-X-", false), ("---X-XX", false),
        ("---X-XO", true), ("---X-O-", false), ("---X-OX", false), ("---X-OO", false), ("---XX--", false), ("---XX-X", false), ("---XX-O", false), ("---XXX-", false),
        ("---XXXX", false), ("---XXXO", true), ("---XXO-", false), ("---XXOX", false), ("---XXOO", true), ("---XO--", false), ("---XO-X", false), ("---XO-O", false),
        ("---XOX-", false), ("---XOXX", false), ("---XOXO", true), ("---XOO-", false), ("---XOOX", false), ("---XOOO", true), ("---O---", false), ("---O--X", false),
        ("---O--O", false), ("---O-X-", false), ("---O-XX", false), ("---O-XO", true), ("---O-O-", false), ("---O-OX", false), ("---O-OO", false), ("---OX--", false),
        ("---OX-X", false), ("---OX-O", false), ("---OXX-", false), ("---OXXX", false), ("---OXXO", true), ("---OXO-", false), ("---OXOX", false), ("---OXOO", true),
        ("---OO--", false), ("---OO-X", false), ("---OO-O", false), ("---OOX-", false), ("---OOXX", false), ("---OOXO", true), ("---OOO-", false), ("---OOOX", false),
        ("---OOOO", false), ("--X----", false), ("--X---X", false), ("--X---O", false), ("--X--X-", false), ("--X--XX", false), ("--X--XO", true), ("--X--O-", false),
        ("--X--OX", false), ("--X--OO", false), ("--X-X--", false), ("--X-X-X", false), ("--X-X-O", false), ("--X-XX-", false), ("--X-XXX", false), ("--X-XXO", true),
        ("--X-XO-", false), ("--X-XOX", false), ("--X-XOO", true), ("--X-O--", false), ("--X-O-X", false), ("--X-O-O", false), ("--X-OX-", false), ("--X-OXX", false),
        ("--X-OXO", true), ("--X-OO-", false), ("--X-OOX", false), ("--X-OOO", false), ("--XX---", false), ("--XX--X", false), ("--XX--O", false), ("--XX-X-", false),
        ("--XX-XX", false), ("--XX-XO", true), ("--XX-O-", false), ("--XX-OX", false), ("--XX-OO", false), ("--XXX--", false), ("--XXX-X", false), ("--XXX-O", false),
        ("--XXXX-", false), ("--XXXXX", false), ("--XXXXO", true), ("--XXXO-", false), ("--XXXOX", false), ("--XXXOO", true), ("--XXO--", false), ("--XXO-X", false),
        ("--XXO-O", false), ("--XXOX-", false), ("--XXOXX", false), ("--XXOXO", true), ("--XXOO-", false), ("--XXOOX", false), ("--XXOOO", true), ("--XO---", false),
        ("--XO--X", false), ("--XO--O", false), ("--XO-X-", false), ("--XO-XX", false), ("--XO-XO", true), ("--XO-O-", false), ("--XO-OX", false), ("--XO-OO", false),
        ("--XOX--", false), ("--XOX-X", false), ("--XOX-O", false), ("--XOXX-", false), ("--XOXXX", false), ("--XOXXO", true), ("--XOXO-", false), ("--XOXOX", false),
        ("--XOXOO", true), ("--XOO--", false), ("--XOO-X", false), ("--XOO-O", false), ("--XOOX-", false), ("--XOOXX", false), ("--XOOXO", true), ("--XOOO-", false),
        ("--XOOOX", false), ("--XOOOO", true), ("--O----", false), ("--O---X", false), ("--O---O", false), ("--O--X-", false), ("--O--XX", false), ("--O--XO", true),
        ("--O--O-", false), ("--O--OX", false), ("--O--OO", false), ("--O-X--", false), ("--O-X-X", false), ("--O-X-O", false), ("--O-XX-", false), ("--O-XXX", false),
        ("--O-XXO", true), ("--O-XO-", false), ("--O-XOX", false), ("--O-XOO", true), ("--O-O--", false), ("--O-O-X", false), ("--O-O-O", false), ("--O-OX-", false),
        ("--O-OXX", false), ("--O-OXO", true), ("--O-OO-", false), ("--O-OOX", false), ("--O-OOO", false), ("--OX---", false), ("--OX--X", false), ("--OX--O", false),
        ("--OX-X-", false), ("--OX-XX", false), ("--OX-XO", true), ("--OX-O-", false), ("--OX-OX", false), ("--OX-OO", false), ("--OXX--", false), ("--OXX-X", false),
        ("--OXX-O", false), ("--OXXX-", false), ("--OXXXX", false), ("--OXXXO", true), ("--OXXO-", false), ("--OXXOX", false), ("--OXXOO", true), ("--OXO--", false),
        ("--OXO-X", false), ("--OXO-O", false), ("--OXOX-", false), ("--OXOXX", false), ("--OXOXO", true), ("--OXOO-", false), ("--OXOOX", false), ("--OXOOO", true),
        ("--OO---", false), ("--OO--X", false), ("--OO--O", false), ("--OO-X-", false), ("--OO-XX", false), ("--OO-XO", true), ("--OO-O-", false), ("--OO-OX", false),
        ("--OO-OO", false), ("--OOX--", false), ("--OOX-X", false), ("--OOX-O", false), ("--OOXX-", false), ("--OOXXX", false), ("--OOXXO", true), ("--OOXO-", false),
        ("--OOXOX", false), ("--OOXOO", true), ("--OOO--", false), ("--OOO-X", false), ("--OOO-O", false), ("--OOOX-", false), ("--OOOXX", false), ("--OOOXO", true),
        ("--OOOO-", false), ("--OOOOX", false), ("--OOOOO", false), ("-X-----", false), ("-X----X", false), ("-X----O", false), ("-X---X-", false), ("-X---XX", false),
        ("-X---XO", true), ("-X---O-", false), ("-X---OX", false), ("-X---OO", false), ("-X--X--", false), ("-X--X-X", false), ("-X--X-O", false), ("-X--XX-", false),
        ("-X--XXX", false), ("-X--XXO", true), ("-X--XO-", false), ("-X--XOX", false), ("-X--XOO", true), ("-X--O--", false), ("-X--O-X", false), ("-X--O-O", false),
        ("-X--OX-", false), ("-X--OXX", false), ("-X--OXO", true), ("-X--OO-", false), ("-X--OOX", false), ("-X--OOO", false), ("-X-X---", false), ("-X-X--X", false),
        ("-X-X--O", false), ("-X-X-X-", false), ("-X-X-XX", false), ("-X-X-XO", true), ("-X-X-O-", false), ("-X-X-OX", false), ("-X-X-OO", false), ("-X-XX--", false),
        ("-X-XX-X", false), ("-X-XX-O", false), ("-X-XXX-", false), ("-X-XXXX", false), ("-X-XXXO", true), ("-X-XXO-", false), ("-X-XXOX", false), ("-X-XXOO", true),
        ("-X-XO--", false), ("-X-XO-X", false), ("-X-XO-O", false), ("-X-XOX-", false), ("-X-XOXX", false), ("-X-XOXO", true), ("-X-XOO-", false), ("-X-XOOX", false),
        ("-X-XOOO", true), ("-X-O---", false), ("-X-O--X", false), ("-X-O--O", false), ("-X-O-X-", false), ("-X-O-XX", false), ("-X-O-XO", true), ("-X-O-O-", false),
        ("-X-O-OX", false), ("-X-O-OO", false), ("-X-OX--", false), ("-X-OX-X", false), ("-X-OX-O", false), ("-X-OXX-", false), ("-X-OXXX", false), ("-X-OXXO", true),
        ("-X-OXO-", false), ("-X-OXOX", false), ("-X-OXOO", true), ("-X-OO--", false), ("-X-OO-X", false), ("-X-OO-O", false), ("-X-OOX-", false), ("-X-OOXX", false),
        ("-X-OOXO", true), ("-X-OOO-", false), ("-X-OOOX", false), ("-X-OOOO", false), ("-XX----", false), ("-XX---X", false), ("-XX---O", false), ("-XX--X-", false),
        ("-XX--XX", false), ("-XX--XO", true), ("-XX--O-", false), ("-XX--OX", false), ("-XX--OO", false), ("-XX-X--", false), ("-XX-X-X", false), ("-XX-X-O", false),
        ("-XX-XX-", false), ("-XX-XXX", false), ("-XX-XXO", true), ("-XX-XO-", false), ("-XX-XOX", false), ("-XX-XOO", true), ("-XX-O--", false), ("-XX-O-X", false),
        ("-XX-O-O", false), ("-XX-OX-", false), ("-XX-OXX", false), ("-XX-OXO", true), ("-XX-OO-", false), ("-XX-OOX", false), ("-XX-OOO", false), ("-XXX---", false),
        ("-XXX--X", false), ("-XXX--O", false), ("-XXX-X-", false), ("-XXX-XX", false), ("-XXX-XO", true), ("-XXX-O-", false), ("-XXX-OX", false), ("-XXX-OO", false),
        ("-XXXX--", false), ("-XXXX-X", false), ("-XXXX-O", false), ("-XXXXX-", false), ("-XXXXXX", false), ("-XXXXXO", true), ("-XXXXO-", false), ("-XXXXOX", false),
        ("-XXXXOO", true), ("-XXXO--", false), ("-XXXO-X", false), ("-XXXO-O", false), ("-XXXOX-", false), ("-XXXOXX", false), ("-XXXOXO", true), ("-XXXOO-", false),
        ("-XXXOOX", false), ("-XXXOOO", true), ("-XXO---", false), ("-XXO--X", false), ("-XXO--O", false), ("-XXO-X-", false), ("-XXO-XX", false), ("-XXO-XO", true),
        ("-XXO-O-", false), ("-XXO-OX", false), ("-XXO-OO", false), ("-XXOX--", false), ("-XXOX-X", false), ("-XXOX-O", false), ("-XXOXX-", false), ("-XXOXXX", false),
        ("-XXOXXO", true), ("-XXOXO-", false), ("-XXOXOX", false), ("-XXOXOO", true), ("-XXOO--", false), ("-XXOO-X", false), ("-XXOO-O", false), ("-XXOOX-", false),
        ("-XXOOXX", false), ("-XXOOXO", true), ("-XXOOO-", false), ("-XXOOOX", false), ("-XXOOOO", true), ("-XO----", false), ("-XO---X", false), ("-XO---O", false),
        ("-XO--X-", false), ("-XO--XX", false), ("-XO--XO", true), ("-XO--O-", false), ("-XO--OX", false), ("-XO--OO", false), ("-XO-X--", false), ("-XO-X-X", false),
        ("-XO-X-O", false), ("-XO-XX-", false), ("-XO-XXX", false), ("-XO-XXO", true), ("-XO-XO-", false), ("-XO-XOX", false), ("-XO-XOO", true), ("-XO-O--", false),
        ("-XO-O-X", false), ("-XO-O-O", false), ("-XO-OX-", false), ("-XO-OXX", false), ("-XO-OXO", true), ("-XO-OO-", false), ("-XO-OOX", false), ("-XO-OOO", false),
        ("-XOX---", false), ("-XOX--X", false), ("-XOX--O", false), ("-XOX-X-", false), ("-XOX-XX", false), ("-XOX-XO", true), ("-XOX-O-", false), ("-XOX-OX", false),
        ("-XOX-OO", false), ("-XOXX--", false), ("-XOXX-X", false), ("-XOXX-O", false), ("-XOXXX-", false), ("-XOXXXX", false), ("-XOXXXO", true), ("-XOXXO-", false),
        ("-XOXXOX", false), ("-XOXXOO", true), ("-XOXO--", false), ("-XOXO-X", false), ("-XOXO-O", false), ("-XOXOX-", false), ("-XOXOXX", false), ("-XOXOXO", true),
        ("-XOXOO-", false), ("-XOXOOX", false), ("-XOXOOO", true), ("-XOO---", false), ("-XOO--X", false), ("-XOO--O", false), ("-XOO-X-", false), ("-XOO-XX", false),
        ("-XOO-XO", true), ("-XOO-O-", false), ("-XOO-OX", false), ("-XOO-OO", false), ("-XOOX--", false), ("-XOOX-X", false), ("-XOOX-O", false), ("-XOOXX-", false),
        ("-XOOXXX", false), ("-XOOXXO", true), ("-XOOXO-", false), ("-XOOXOX", false), ("-XOOXOO", true), ("-XOOO--", false), ("-XOOO-X", false), ("-XOOO-O", false),
        ("-XOOOX-", false), ("-XOOOXX", false), ("-XOOOXO", true), ("-XOOOO-", false), ("-XOOOOX", false), ("-XOOOOO", true), ("-O-----", false), ("-O----X", false),
        ("-O----O", false), ("-O---X-", false), ("-O---XX", false), ("-O---XO", true), ("-O---O-", false), ("-O---OX", false), ("-O---OO", false), ("-O--X--", false),
        ("-O--X-X", false), ("-O--X-O", false), ("-O--XX-", false), ("-O--XXX", false), ("-O--XXO", true), ("-O--XO-", false), ("-O--XOX", false), ("-O--XOO", true),
        ("-O--O--", false), ("-O--O-X", false), ("-O--O-O", false), ("-O--OX-", false), ("-O--OXX", false), ("-O--OXO", true), ("-O--OO-", false), ("-O--OOX", false),
        ("-O--OOO", false), ("-O-X---", false), ("-O-X--X", false), ("-O-X--O", false), ("-O-X-X-", false), ("-O-X-XX", false), ("-O-X-XO", true), ("-O-X-O-", false),
        ("-O-X-OX", false), ("-O-X-OO", false), ("-O-XX--", false), ("-O-XX-X", false), ("-O-XX-O", false), ("-O-XXX-", false), ("-O-XXXX", false), ("-O-XXXO", true),
        ("-O-XXO-", false), ("-O-XXOX", false), ("-O-XXOO", true), ("-O-XO--", false), ("-O-XO-X", false), ("-O-XO-O", false), ("-O-XOX-", false), ("-O-XOXX", false),
        ("-O-XOXO", true), ("-O-XOO-", false), ("-O-XOOX", false), ("-O-XOOO", true), ("-O-O---", false), ("-O-O--X", false), ("-O-O--O", false), ("-O-O-X-", false),
        ("-O-O-XX", false), ("-O-O-XO", true), ("-O-O-O-", false), ("-O-O-OX", false), ("-O-O-OO", false), ("-O-OX--", false), ("-O-OX-X", false), ("-O-OX-O", false),
        ("-O-OXX-", false), ("-O-OXXX", false), ("-O-OXXO", true), ("-O-OXO-", false), ("-O-OXOX", false), ("-O-OXOO", true), ("-O-OO--", false), ("-O-OO-X", false),
        ("-O-OO-O", false), ("-O-OOX-", false), ("-O-OOXX", false), ("-O-OOXO", true), ("-O-OOO-", false), ("-O-OOOX", false), ("-O-OOOO", false), ("-OX----", false),
        ("-OX---X", false), ("-OX---O", false), ("-OX--X-", false), ("-OX--XX", false), ("-OX--XO", true), ("-OX--O-", false), ("-OX--OX", false), ("-OX--OO", false),
        ("-OX-X--", false), ("-OX-X-X", false), ("-OX-X-O", false), ("-OX-XX-", false), ("-OX-XXX", false), ("-OX-XXO", true), ("-OX-XO-", false), ("-OX-XOX", false),
        ("-OX-XOO", true), ("-OX-O--", false), ("-OX-O-X", false), ("-OX-O-O", false), ("-OX-OX-", false), ("-OX-OXX", false), ("-OX-OXO", true), ("-OX-OO-", false),
        ("-OX-OOX", false), ("-OX-OOO", false), ("-OXX---", false), ("-OXX--X", false), ("-OXX--O", false), ("-OXX-X-", false), ("-OXX-XX", false), ("-OXX-XO", true),
        ("-OXX-O-", false), ("-OXX-OX", false), ("-OXX-OO", false), ("-OXXX--", false), ("-OXXX-X", false), ("-OXXX-O", false), ("-OXXXX-", false), ("-OXXXXX", false),
        ("-OXXXXO", true), ("-OXXXO-", false), ("-OXXXOX", false), ("-OXXXOO", true), ("-OXXO--", false), ("-OXXO-X", false), ("-OXXO-O", false), ("-OXXOX-", false),
        ("-OXXOXX", false), ("-OXXOXO", true), ("-OXXOO-", false), ("-OXXOOX", false), ("-OXXOOO", true), ("-OXO---", false), ("-OXO--X", false), ("-OXO--O", false),
        ("-OXO-X-", false), ("-OXO-XX", false), ("-OXO-XO", true), ("-OXO-O-", false), ("-OXO-OX", false), ("-OXO-OO", false), ("-OXOX--", false), ("-OXOX-X", false),
        ("-OXOX-O", false), ("-OXOXX-", false), ("-OXOXXX", false), ("-OXOXXO", true), ("-OXOXO-", false), ("-OXOXOX", false), ("-OXOXOO", true), ("-OXOO--", false),
        ("-OXOO-X", false), ("-OXOO-O", false), ("-OXOOX-", false), ("-OXOOXX", false), ("-OXOOXO", true), ("-OXOOO-", false), ("-OXOOOX", false), ("-OXOOOO", true),
        ("-OO----", false), ("-OO---X", false), ("-OO---O", false), ("-OO--X-", false), ("-OO--XX", false), ("-OO--XO", true), ("-OO--O-", false), ("-OO--OX", false),
        ("-OO--OO", false), ("-OO-X--", false), ("-OO-X-X", false), ("-OO-X-O", false), ("-OO-XX-", false), ("-OO-XXX", false), ("-OO-XXO", true), ("-OO-XO-", false),
        ("-OO-XOX", false), ("-OO-XOO", true), ("-OO-O--", false), ("-OO-O-X", false), ("-OO-O-O", false), ("-OO-OX-", false), ("-OO-OXX", false), ("-OO-OXO", true),
        ("-OO-OO-", false), ("-OO-OOX", false), ("-OO-OOO", false), ("-OOX---", false), ("-OOX--X", false), ("-OOX--O", false), ("-OOX-X-", false), ("-OOX-XX", false),
        ("-OOX-XO", true), ("-OOX-O-", false), ("-OOX-OX", false), ("-OOX-OO", false), ("-OOXX--", false), ("-OOXX-X", false), ("-OOXX-O", false), ("-OOXXX-", false),
        ("-OOXXXX", false), ("-OOXXXO", true), ("-OOXXO-", false), ("-OOXXOX", false), ("-OOXXOO", true), ("-OOXO--", false), ("-OOXO-X", false), ("-OOXO-O", false),
        ("-OOXOX-", false), ("-OOXOXX", false), ("-OOXOXO", true), ("-OOXOO-", false), ("-OOXOOX", false), ("-OOXOOO", true), ("-OOO---", false), ("-OOO--X", false),
        ("-OOO--O", false), ("-OOO-X-", false), ("-OOO-XX", false), ("-OOO-XO", true), ("-OOO-O-", false), ("-OOO-OX", false), ("-OOO-OO", false), ("-OOOX--", false),
        ("-OOOX-X", false), ("-OOOX-O", false), ("-OOOXX-", false), ("-OOOXXX", false), ("-OOOXXO", true), ("-OOOXO-", false), ("-OOOXOX", false), ("-OOOXOO", true),
        ("-OOOO--", false), ("-OOOO-X", false), ("-OOOO-O", false), ("-OOOOX-", false), ("-OOOOXX", false), ("-OOOOXO", true), ("-OOOOO-", false), ("-OOOOOX", false),
        ("-OOOOOO", false), ("X------", false), ("X-----X", false), ("X-----O", false), ("X----X-", false), ("X----XX", false), ("X----XO", true), ("X----O-", false),
        ("X----OX", false), ("X----OO", false), ("X---X--", false), ("X---X-X", false), ("X---X-O", false), ("X---XX-", false), ("X---XXX", false), ("X---XXO", true),
        ("X---XO-", false), ("X---XOX", false), ("X---XOO", true), ("X---O--", false), ("X---O-X", false), ("X---O-O", false), ("X---OX-", false), ("X---OXX", false),
        ("X---OXO", true), ("X---OO-", false), ("X---OOX", false), ("X---OOO", false), ("X--X---", false), ("X--X--X", false), ("X--X--O", false), ("X--X-X-", false),
        ("X--X-XX", false), ("X--X-XO", true), ("X--X-O-", false), ("X--X-OX", false), ("X--X-OO", false), ("X--XX--", false), ("X--XX-X", false), ("X--XX-O", false),
        ("X--XXX-", false), ("X--XXXX", false), ("X--XXXO", true), ("X--XXO-", false), ("X--XXOX", false), ("X--XXOO", true), ("X--XO--", false), ("X--XO-X", false),
        ("X--XO-O", false), ("X--XOX-", false), ("X--XOXX", false), ("X--XOXO", true), ("X--XOO-", false), ("X--XOOX", false), ("X--XOOO", true), ("X--O---", false),
        ("X--O--X", false), ("X--O--O", false), ("X--O-X-", false), ("X--O-XX", false), ("X--O-XO", true), ("X--O-O-", false), ("X--O-OX", false), ("X--O-OO", false),
        ("X--OX--", false), ("X--OX-X", false), ("X--OX-O", false), ("X--OXX-", false), ("X--OXXX", false), ("X--OXXO", true), ("X--OXO-", false), ("X--OXOX", false),
        ("X--OXOO", true), ("X--OO--", false), ("X--OO-X", false), ("X--OO-O", false), ("X--OOX-", false), ("X--OOXX", false), ("X--OOXO", true), ("X--OOO-", false),
        ("X--OOOX", false), ("X--OOOO", false), ("X-X----", false), ("X-X---X", false), ("X-X---O", false), ("X-X--X-", false), ("X-X--XX", false), ("X-X--XO", true),
        ("X-X--O-", false), ("X-X--OX", false), ("X-X--OO", false), ("X-X-X--", false), ("X-X-X-X", false), ("X-X-X-O", false), ("X-X-XX-", false), ("X-X-XXX", false),
        ("X-X-XXO", true), ("X-X-XO-", false), ("X-X-XOX", false), ("X-X-XOO", true), ("X-X-O--", false), ("X-X-O-X", false), ("X-X-O-O", false), ("X-X-OX-", false),
        ("X-X-OXX", false), ("X-X-OXO", true), ("X-X-OO-", false), ("X-X-OOX", false), ("X-X-OOO", false), ("X-XX---", false), ("X-XX--X", false), ("X-XX--O", false),
        ("X-XX-X-", false), ("X-XX-XX", false), ("X-XX-XO", true), ("X-XX-O-", false), ("X-XX-OX", false), ("X-XX-OO", false), ("X-XXX--", false), ("X-XXX-X", false),
        ("X-XXX-O", false), ("X-XXXX-", false), ("X-XXXXX", false), ("X-XXXXO", true), ("X-XXXO-", false), ("X-XXXOX", false), ("X-XXXOO", true), ("X-XXO--", false),
        ("X-XXO-X", false), ("X-XXO-O", false), ("X-XXOX-", false), ("X-XXOXX", false), ("X-XXOXO", true), ("X-XXOO-", false), ("X-XXOOX", false), ("X-XXOOO", true),
        ("X-XO---", false), ("X-XO--X", false), ("X-XO--O", false), ("X-XO-X-", false), ("X-XO-XX", false), ("X-XO-XO", true), ("X-XO-O-", false), ("X-XO-OX", false),
        ("X-XO-OO", false), ("X-XOX--", false), ("X-XOX-X", false), ("X-XOX-O", false), ("X-XOXX-", false), ("X-XOXXX", false), ("X-XOXXO", true), ("X-XOXO-", false),
        ("X-XOXOX", false), ("X-XOXOO", true), ("X-XOO--", false), ("X-XOO-X", false), ("X-XOO-O", false), ("X-XOOX-", false), ("X-XOOXX", false), ("X-XOOXO", true),
        ("X-XOOO-", false), ("X-XOOOX", false), ("X-XOOOO", true), ("X-O----", false), ("X-O---X", false), ("X-O---O", false), ("X-O--X-", false), ("X-O--XX", false),
        ("X-O--XO", true), ("X-O--O-", false), ("X-O--OX", false), ("X-O--OO", false), ("X-O-X--", false), ("X-O-X-X", false), ("X-O-X-O", false), ("X-O-XX-", false),
        ("X-O-XXX", false), ("X-O-XXO", true), ("X-O-XO-", false), ("X-O-XOX", false), ("X-O-XOO", true), ("X-O-O--", false), ("X-O-O-X", false), ("X-O-O-O", false),
        ("X-O-OX-", false), ("X-O-OXX", false), ("X-O-OXO", true), ("X-O-OO-", false), ("X-O-OOX", false), ("X-O-OOO", false), ("X-OX---", false), ("X-OX--X", false),
        ("X-OX--O", false), ("X-OX-X-", false), ("X-OX-XX", false), ("X-OX-XO", true), ("X-OX-O-", false), ("X-OX-OX", false), ("X-OX-OO", false), ("X-OXX--", false),
        ("X-OXX-X", false), ("X-OXX-O", false), ("X-OXXX-", false), ("X-OXXXX", false), ("X-OXXXO", true), ("X-OXXO-", false), ("X-OXXOX", false), ("X-OXXOO", true),
        ("X-OXO--", false), ("X-OXO-X", false), ("X-OXO-O", false), ("X-OXOX-", false), ("X-OXOXX", false), ("X-OXOXO", true), ("X-OXOO-", false), ("X-OXOOX", false),
        ("X-OXOOO", true), ("X-OO---", false), ("X-OO--X", false), ("X-OO--O", false), ("X-OO-X-", false), ("X-OO-XX", false), ("X-OO-XO", true), ("X-OO-O-", false),
        ("X-OO-OX", false), ("X-OO-OO", false), ("X-OOX--", false), ("X-OOX-X", false), ("X-OOX-O", false), ("X-OOXX-", false), ("X-OOXXX", false), ("X-OOXXO", true),
        ("X-OOXO-", false), ("X-OOXOX", false), ("X-OOXOO", true), ("X-OOO--", false), ("X-OOO-X", false), ("X-OOO-O", false), ("X-OOOX-", false), ("X-OOOXX", false),
        ("X-OOOXO", true), ("X-OOOO-", false), ("X-OOOOX", false), ("X-OOOOO", false), ("XX-----", false), ("XX----X", false), ("XX----O", false), ("XX---X-", false),
        ("XX---XX", false), ("XX---XO", true), ("XX---O-", false), ("XX---OX", false), ("XX---OO", false), ("XX--X--", false), ("XX--X-X", false), ("XX--X-O", false),
        ("XX--XX-", false), ("XX--XXX", false), ("XX--XXO", true), ("XX--XO-", false), ("XX--XOX", false), ("XX--XOO", true), ("XX--O--", false), ("XX--O-X", false),
        ("XX--O-O", false), ("XX--OX-", false), ("XX--OXX", false), ("XX--OXO", true), ("XX--OO-", false), ("XX--OOX", false), ("XX--OOO", false), ("XX-X---", false),
        ("XX-X--X", false), ("XX-X--O", false), ("XX-X-X-", false), ("XX-X-XX", false), ("XX-X-XO", true), ("XX-X-O-", false), ("XX-X-OX", false), ("XX-X-OO", false),
        ("XX-XX--", false), ("XX-XX-X", false), ("XX-XX-O", false), ("XX-XXX-", false), ("XX-XXXX", false), ("XX-XXXO", true), ("XX-XXO-", false), ("XX-XXOX", false),
        ("XX-XXOO", true), ("XX-XO--", false), ("XX-XO-X", false), ("XX-XO-O", false), ("XX-XOX-", false), ("XX-XOXX", false), ("XX-XOXO", true), ("XX-XOO-", false),
        ("XX-XOOX", false), ("XX-XOOO", true), ("XX-O---", false), ("XX-O--X", false), ("XX-O--O", false), ("XX-O-X-", false), ("XX-O-XX", false), ("XX-O-XO", true),
        ("XX-O-O-", false), ("XX-O-OX", false), ("XX-O-OO", false), ("XX-OX--", false), ("XX-OX-X", false), ("XX-OX-O", false), ("XX-OXX-", false), ("XX-OXXX", false),
        ("XX-OXXO", true), ("XX-OXO-", false), ("XX-OXOX", false), ("XX-OXOO", true), ("XX-OO--", false), ("XX-OO-X", false), ("XX-OO-O", false), ("XX-OOX-", false),
        ("XX-OOXX", false), ("XX-OOXO", true), ("XX-OOO-", false), ("XX-OOOX", false), ("XX-OOOO", false), ("XXX----", false), ("XXX---X", false), ("XXX---O", false),
        ("XXX--X-", false), ("XXX--XX", false), ("XXX--XO", true), ("XXX--O-", false), ("XXX--OX", false), ("XXX--OO", false), ("XXX-X--", false), ("XXX-X-X", false),
        ("XXX-X-O", false), ("XXX-XX-", false), ("XXX-XXX", false), ("XXX-XXO", true), ("XXX-XO-", false), ("XXX-XOX", false), ("XXX-XOO", true), ("XXX-O--", false),
        ("XXX-O-X", false), ("XXX-O-O", false), ("XXX-OX-", false), ("XXX-OXX", false), ("XXX-OXO", true), ("XXX-OO-", false), ("XXX-OOX", false), ("XXX-OOO", false),
        ("XXXX---", false), ("XXXX--X", false), ("XXXX--O", false), ("XXXX-X-", false), ("XXXX-XX", false), ("XXXX-XO", true), ("XXXX-O-", false), ("XXXX-OX", false),
        ("XXXX-OO", false), ("XXXXX--", false), ("XXXXX-X", false), ("XXXXX-O", false), ("XXXXXX-", false), ("XXXXXXX", false), ("XXXXXXO", true), ("XXXXXO-", false),
        ("XXXXXOX", false), ("XXXXXOO", true), ("XXXXO--", false), ("XXXXO-X", false), ("XXXXO-O", false), ("XXXXOX-", false), ("XXXXOXX", false), ("XXXXOXO", true),
        ("XXXXOO-", false), ("XXXXOOX", false), ("XXXXOOO", true), ("XXXO---", false), ("XXXO--X", false), ("XXXO--O", false), ("XXXO-X-", false), ("XXXO-XX", false),
        ("XXXO-XO", true), ("XXXO-O-", false), ("XXXO-OX", false), ("XXXO-OO", false), ("XXXOX--", false), ("XXXOX-X", false), ("XXXOX-O", false), ("XXXOXX-", false),
        ("XXXOXXX", false), ("XXXOXXO", true), ("XXXOXO-", false), ("XXXOXOX", false), ("XXXOXOO", true), ("XXXOO--", false), ("XXXOO-X", false), ("XXXOO-O", false),
        ("XXXOOX-", false), ("XXXOOXX", false), ("XXXOOXO", true), ("XXXOOO-", false), ("XXXOOOX", false), ("XXXOOOO", true), ("XXO----", false), ("XXO---X", false),
        ("XXO---O", false), ("XXO--X-", false), ("XXO--XX", false), ("XXO--XO", true), ("XXO--O-", false), ("XXO--OX", false), ("XXO--OO", false), ("XXO-X--", false),
        ("XXO-X-X", false), ("XXO-X-O", false), ("XXO-XX-", false), ("XXO-XXX", false), ("XXO-XXO", true), ("XXO-XO-", false), ("XXO-XOX", false), ("XXO-XOO", true),
        ("XXO-O--", false), ("XXO-O-X", false), ("XXO-O-O", false), ("XXO-OX-", false), ("XXO-OXX", false), ("XXO-OXO", true), ("XXO-OO-", false), ("XXO-OOX", false),
        ("XXO-OOO", false), ("XXOX---", false), ("XXOX--X", false), ("XXOX--O", false), ("XXOX-X-", false), ("XXOX-XX", false), ("XXOX-XO", true), ("XXOX-O-", false),
        ("XXOX-OX", false), ("XXOX-OO", false), ("XXOXX--", false), ("XXOXX-X", false), ("XXOXX-O", false), ("XXOXXX-", false), ("XXOXXXX", false), ("XXOXXXO", true),
        ("XXOXXO-", false), ("XXOXXOX", false), ("XXOXXOO", true), ("XXOXO--", false), ("XXOXO-X", false), ("XXOXO-O", false), ("XXOXOX-", false), ("XXOXOXX", false),
        ("XXOXOXO", true), ("XXOXOO-", false), ("XXOXOOX", false), ("XXOXOOO", true), ("XXOO---", false), ("XXOO--X", false), ("XXOO--O", false), ("XXOO-X-", false),
        ("XXOO-XX", false), ("XXOO-XO", true), ("XXOO-O-", false), ("XXOO-OX", false), ("XXOO-OO", false), ("XXOOX--", false), ("XXOOX-X", false), ("XXOOX-O", false),
        ("XXOOXX-", false), ("XXOOXXX", false), ("XXOOXXO", true), ("XXOOXO-", false), ("XXOOXOX", false), ("XXOOXOO", true), ("XXOOO--", false), ("XXOOO-X", false),
        ("XXOOO-O", false), ("XXOOOX-", false), ("XXOOOXX", false), ("XXOOOXO", true), ("XXOOOO-", false), ("XXOOOOX", false), ("XXOOOOO", true), ("XO-----", false),
        ("XO----X", false), ("XO----O", false), ("XO---X-", false), ("XO---XX", false), ("XO---XO", true), ("XO---O-", false), ("XO---OX", false), ("XO---OO", false),
        ("XO--X--", false), ("XO--X-X", false), ("XO--X-O", false), ("XO--XX-", false), ("XO--XXX", false), ("XO--XXO", true), ("XO--XO-", false), ("XO--XOX", false),
        ("XO--XOO", true), ("XO--O--", false), ("XO--O-X", false), ("XO--O-O", false), ("XO--OX-", false), ("XO--OXX", false), ("XO--OXO", true), ("XO--OO-", false),
        ("XO--OOX", false), ("XO--OOO", false), ("XO-X---", false), ("XO-X--X", false), ("XO-X--O", false), ("XO-X-X-", false), ("XO-X-XX", false), ("XO-X-XO", true),
        ("XO-X-O-", false), ("XO-X-OX", false), ("XO-X-OO", false), ("XO-XX--", false), ("XO-XX-X", false), ("XO-XX-O", false), ("XO-XXX-", false), ("XO-XXXX", false),
        ("XO-XXXO", true), ("XO-XXO-", false), ("XO-XXOX", false), ("XO-XXOO", true), ("XO-XO--", false), ("XO-XO-X", false), ("XO-XO-O", false), ("XO-XOX-", false),
        ("XO-XOXX", false), ("XO-XOXO", true), ("XO-XOO-", false), ("XO-XOOX", false), ("XO-XOOO", true), ("XO-O---", false), ("XO-O--X", false), ("XO-O--O", false),
        ("XO-O-X-", false), ("XO-O-XX", false), ("XO-O-XO", true), ("XO-O-O-", false), ("XO-O-OX", false), ("XO-O-OO", false), ("XO-OX--", false), ("XO-OX-X", false),
        ("XO-OX-O", false), ("XO-OXX-", false), ("XO-OXXX", false), ("XO-OXXO", true), ("XO-OXO-", false), ("XO-OXOX", false), ("XO-OXOO", true), ("XO-OO--", false),
        ("XO-OO-X", false), ("XO-OO-O", false), ("XO-OOX-", false), ("XO-OOXX", false), ("XO-OOXO", true), ("XO-OOO-", false), ("XO-OOOX", false), ("XO-OOOO", false),
        ("XOX----", false), ("XOX---X", false), ("XOX---O", false), ("XOX--X-", false), ("XOX--XX", false), ("XOX--XO", true), ("XOX--O-", false), ("XOX--OX", false),
        ("XOX--OO", false), ("XOX-X--", false), ("XOX-X-X", false), ("XOX-X-O", false), ("XOX-XX-", false), ("XOX-XXX", false), ("XOX-XXO", true), ("XOX-XO-", false),
        ("XOX-XOX", false), ("XOX-XOO", true), ("XOX-O--", false), ("XOX-O-X", false), ("XOX-O-O", false), ("XOX-OX-", false), ("XOX-OXX", false), ("XOX-OXO", true),
        ("XOX-OO-", false), ("XOX-OOX", false), ("XOX-OOO", false), ("XOXX---", false), ("XOXX--X", false), ("XOXX--O", false), ("XOXX-X-", false), ("XOXX-XX", false),
        ("XOXX-XO", true), ("XOXX-O-", false), ("XOXX-OX", false), ("XOXX-OO", false), ("XOXXX--", false), ("XOXXX-X", false), ("XOXXX-O", false), ("XOXXXX-", false),
        ("XOXXXXX", false), ("XOXXXXO", true), ("XOXXXO-", false), ("XOXXXOX", false), ("XOXXXOO", true), ("XOXXO--", false), ("XOXXO-X", false), ("XOXXO-O", false),
        ("XOXXOX-", false), ("XOXXOXX", false), ("XOXXOXO", true), ("XOXXOO-", false), ("XOXXOOX", false), ("XOXXOOO", true), ("XOXO---", false), ("XOXO--X", false),
        ("XOXO--O", false), ("XOXO-X-", false), ("XOXO-XX", false), ("XOXO-XO", true), ("XOXO-O-", false), ("XOXO-OX", false), ("XOXO-OO", false), ("XOXOX--", false),
        ("XOXOX-X", false), ("XOXOX-O", false), ("XOXOXX-", false), ("XOXOXXX", false), ("XOXOXXO", true), ("XOXOXO-", false), ("XOXOXOX", false), ("XOXOXOO", true),
        ("XOXOO--", false), ("XOXOO-X", false), ("XOXOO-O", false), ("XOXOOX-", false), ("XOXOOXX", false), ("XOXOOXO", true), ("XOXOOO-", false), ("XOXOOOX", false),
        ("XOXOOOO", true), ("XOO----", false), ("XOO---X", false), ("XOO---O", false), ("XOO--X-", false), ("XOO--XX", false), ("XOO--XO", true), ("XOO--O-", false),
        ("XOO--OX", false), ("XOO--OO", false), ("XOO-X--", false), ("XOO-X-X", false), ("XOO-X-O", false), ("XOO-XX-", false), ("XOO-XXX", false), ("XOO-XXO", true),
        ("XOO-XO-", false), ("XOO-XOX", false), ("XOO-XOO", true), ("XOO-O--", false), ("XOO-O-X", false), ("XOO-O-O", false), ("XOO-OX-", false), ("XOO-OXX", false),
        ("XOO-OXO", true), ("XOO-OO-", false), ("XOO-OOX", false), ("XOO-OOO", false), ("XOOX---", false), ("XOOX--X", false), ("XOOX--O", false), ("XOOX-X-", false),
        ("XOOX-XX", false), ("XOOX-XO", true), ("XOOX-O-", false), ("XOOX-OX", false), ("XOOX-OO", false), ("XOOXX--", false), ("XOOXX-X", false), ("XOOXX-O", false),
        ("XOOXXX-", false), ("XOOXXXX", false), ("XOOXXXO", true), ("XOOXXO-", false), ("XOOXXOX", false), ("XOOXXOO", true), ("XOOXO--", false), ("XOOXO-X", false),
        ("XOOXO-O", false), ("XOOXOX-", false), ("XOOXOXX", false), ("XOOXOXO", true), ("XOOXOO-", false), ("XOOXOOX", false), ("XOOXOOO", true), ("XOOO---", false),
        ("XOOO--X", false), ("XOOO--O", false), ("XOOO-X-", false), ("XOOO-XX", false), ("XOOO-XO", true), ("XOOO-O-", false), ("XOOO-OX", false), ("XOOO-OO", false),
        ("XOOOX--", false), ("XOOOX-X", false), ("XOOOX-O", false), ("XOOOXX-", false), ("XOOOXXX", false), ("XOOOXXO", true), ("XOOOXO-", false), ("XOOOXOX", false),
        ("XOOOXOO", true), ("XOOOO--", false), ("XOOOO-X", false), ("XOOOO-O", false), ("XOOOOX-", false), ("XOOOOXX", false), ("XOOOOXO", true), ("XOOOOO-", false),
        ("XOOOOOX", false), ("XOOOOOO", true), ("O------", false), ("O-----X", false), ("O-----O", false), ("O----X-", false), ("O----XX", false), ("O----XO", true),
        ("O----O-", false), ("O----OX", false), ("O----OO", false), ("O---X--", false), ("O---X-X", false), ("O---X-O", false), ("O---XX-", false), ("O---XXX", false),
        ("O---XXO", true), ("O---XO-", false), ("O---XOX", false), ("O---XOO", true), ("O---O--", false), ("O---O-X", false), ("O---O-O", false), ("O---OX-", false),
        ("O---OXX", false), ("O---OXO", true), ("O---OO-", false), ("O---OOX", false), ("O---OOO", false), ("O--X---", false), ("O--X--X", false), ("O--X--O", false),
        ("O--X-X-", false), ("O--X-XX", false), ("O--X-XO", true), ("O--X-O-", false), ("O--X-OX", false), ("O--X-OO", false), ("O--XX--", false), ("O--XX-X", false),
        ("O--XX-O", false), ("O--XXX-", false), ("O--XXXX", false), ("O--XXXO", true), ("O--XXO-", false), ("O--XXOX", false), ("O--XXOO", true), ("O--XO--", false),
        ("O--XO-X", false), ("O--XO-O", false), ("O--XOX-", false), ("O--XOXX", false), ("O--XOXO", true), ("O--XOO-", false), ("O--XOOX", false), ("O--XOOO", true),
        ("O--O---", false), ("O--O--X", false), ("O--O--O", false), ("O--O-X-", false), ("O--O-XX", false), ("O--O-XO", true), ("O--O-O-", false), ("O--O-OX", false),
        ("O--O-OO", false), ("O--OX--", false), ("O--OX-X", false), ("O--OX-O", false), ("O--OXX-", false), ("O--OXXX", false), ("O--OXXO", true), ("O--OXO-", false),
        ("O--OXOX", false), ("O--OXOO", true), ("O--OO--", false), ("O--OO-X", false), ("O--OO-O", false), ("O--OOX-", false), ("O--OOXX", false), ("O--OOXO", true),
        ("O--OOO-", false), ("O--OOOX", false), ("O--OOOO", false), ("O-X----", false), ("O-X---X", false), ("O-X---O", false), ("O-X--X-", false), ("O-X--XX", false),
        ("O-X--XO", true), ("O-X--O-", false), ("O-X--OX", false), ("O-X--OO", false), ("O-X-X--", false), ("O-X-X-X", false), ("O-X-X-O", false), ("O-X-XX-", false),
        ("O-X-XXX", false), ("O-X-XXO", true), ("O-X-XO-", false), ("O-X-XOX", false), ("O-X-XOO", true), ("O-X-O--", false), ("O-X-O-X", false), ("O-X-O-O", false),
        ("O-X-OX-", false), ("O-X-OXX", false), ("O-X-OXO", true), ("O-X-OO-", false), ("O-X-OOX", false), ("O-X-OOO", false), ("O-XX---", false), ("O-XX--X", false),
        ("O-XX--O", false), ("O-XX-X-", false), ("O-XX-XX", false), ("O-XX-XO", true), ("O-XX-O-", false), ("O-XX-OX", false), ("O-XX-OO", false), ("O-XXX--", false),
        ("O-XXX-X", false), ("O-XXX-O", false), ("O-XXXX-", false), ("O-XXXXX", false), ("O-XXXXO", true), ("O-XXXO-", false), ("O-XXXOX", false), ("O-XXXOO", true),
        ("O-XXO--", false), ("O-XXO-X", false), ("O-XXO-O", false), ("O-XXOX-", false), ("O-XXOXX", false), ("O-XXOXO", true), ("O-XXOO-", false), ("O-XXOOX", false),
        ("O-XXOOO", true), ("O-XO---", false), ("O-XO--X", false), ("O-XO--O", false), ("O-XO-X-", false), ("O-XO-XX", false), ("O-XO-XO", true), ("O-XO-O-", false),
        ("O-XO-OX", false), ("O-XO-OO", false), ("O-XOX--", false), ("O-XOX-X", false), ("O-XOX-O", false), ("O-XOXX-", false), ("O-XOXXX", false), ("O-XOXXO", true),
        ("O-XOXO-", false), ("O-XOXOX", false), ("O-XOXOO", true), ("O-XOO--", false), ("O-XOO-X", false), ("O-XOO-O", false), ("O-XOOX-", false), ("O-XOOXX", false),
        ("O-XOOXO", true), ("O-XOOO-", false), ("O-XOOOX", false), ("O-XOOOO", true), ("O-O----", false), ("O-O---X", false), ("O-O---O", false), ("O-O--X-", false),
        ("O-O--XX", false), ("O-O--XO", true), ("O-O--O-", false), ("O-O--OX", false), ("O-O--OO", false), ("O-O-X--", false), ("O-O-X-X", false), ("O-O-X-O", false),
        ("O-O-XX-", false), ("O-O-XXX", false), ("O-O-XXO", true), ("O-O-XO-", false), ("O-O-XOX", false), ("O-O-XOO", true), ("O-O-O--", false), ("O-O-O-X", false),
        ("O-O-O-O", false), ("O-O-OX-", false), ("O-O-OXX", false), ("O-O-OXO", true), ("O-O-OO-", false), ("O-O-OOX", false), ("O-O-OOO", false), ("O-OX---", false),
        ("O-OX--X", false), ("O-OX--O", false), ("O-OX-X-", false), ("O-OX-XX", false), ("O-OX-XO", true), ("O-OX-O-", false), ("O-OX-OX", false), ("O-OX-OO", false),
        ("O-OXX--", false), ("O-OXX-X", false), ("O-OXX-O", false), ("O-OXXX-", false), ("O-OXXXX", false), ("O-OXXXO", true), ("O-OXXO-", false), ("O-OXXOX", false),
        ("O-OXXOO", true), ("O-OXO--", false), ("O-OXO-X", false), ("O-OXO-O", false), ("O-OXOX-", false), ("O-OXOXX", false), ("O-OXOXO", true), ("O-OXOO-", false),
        ("O-OXOOX", false), ("O-OXOOO", true), ("O-OO---", false), ("O-OO--X", false), ("O-OO--O", false), ("O-OO-X-", false), ("O-OO-XX", false), ("O-OO-XO", true),
        ("O-OO-O-", false), ("O-OO-OX", false), ("O-OO-OO", false), ("O-OOX--", false), ("O-OOX-X", false), ("O-OOX-O", false), ("O-OOXX-", false), ("O-OOXXX", false),
        ("O-OOXXO", true), ("O-OOXO-", false), ("O-OOXOX", false), ("O-OOXOO", true), ("O-OOO--", false), ("O-OOO-X", false), ("O-OOO-O", false), ("O-OOOX-", false),
        ("O-OOOXX", false), ("O-OOOXO", true), ("O-OOOO-", false), ("O-OOOOX", false), ("O-OOOOO", false), ("OX-----", false), ("OX----X", false), ("OX----O", false),
        ("OX---X-", false), ("OX---XX", false), ("OX---XO", true), ("OX---O-", false), ("OX---OX", false), ("OX---OO", false), ("OX--X--", false), ("OX--X-X", false),
        ("OX--X-O", false), ("OX--XX-", false), ("OX--XXX", false), ("OX--XXO", true), ("OX--XO-", false), ("OX--XOX", false), ("OX--XOO", true), ("OX--O--", false),
        ("OX--O-X", false), ("OX--O-O", false), ("OX--OX-", false), ("OX--OXX", false), ("OX--OXO", true), ("OX--OO-", false), ("OX--OOX", false), ("OX--OOO", false),
        ("OX-X---", false), ("OX-X--X", false), ("OX-X--O", false), ("OX-X-X-", false), ("OX-X-XX", false), ("OX-X-XO", true), ("OX-X-O-", false), ("OX-X-OX", false),
        ("OX-X-OO", false), ("OX-XX--", false), ("OX-XX-X", false), ("OX-XX-O", false), ("OX-XXX-", false), ("OX-XXXX", false), ("OX-XXXO", true), ("OX-XXO-", false),
        ("OX-XXOX", false), ("OX-XXOO", true), ("OX-XO--", false), ("OX-XO-X", false), ("OX-XO-O", false), ("OX-XOX-", false), ("OX-XOXX", false), ("OX-XOXO", true),
        ("OX-XOO-", false), ("OX-XOOX", false), ("OX-XOOO", true), ("OX-O---", false), ("OX-O--X", false), ("OX-O--O", false), ("OX-O-X-", false), ("OX-O-XX", false),
        ("OX-O-XO", true), ("OX-O-O-", false), ("OX-O-OX", false), ("OX-O-OO", false), ("OX-OX--", false), ("OX-OX-X", false), ("OX-OX-O", false), ("OX-OXX-", false),
        ("OX-OXXX", false), ("OX-OXXO", true), ("OX-OXO-", false), ("OX-OXOX", false), ("OX-OXOO", true), ("OX-OO--", false), ("OX-OO-X", false), ("OX-OO-O", false),
        ("OX-OOX-", false), ("OX-OOXX", false), ("OX-OOXO", true), ("OX-OOO-", false), ("OX-OOOX", false), ("OX-OOOO", false), ("OXX----", false), ("OXX---X", false),
        ("OXX---O", false), ("OXX--X-", false), ("OXX--XX", false), ("OXX--XO", true), ("OXX--O-", false), ("OXX--OX", false), ("OXX--OO", false), ("OXX-X--", false),
        ("OXX-X-X", false), ("OXX-X-O", false), ("OXX-XX-", false), ("OXX-XXX", false), ("OXX-XXO", true), ("OXX-XO-", false), ("OXX-XOX", false), ("OXX-XOO", true),
        ("OXX-O--", false), ("OXX-O-X", false), ("OXX-O-O", false), ("OXX-OX-", false), ("OXX-OXX", false), ("OXX-OXO", true), ("OXX-OO-", false), ("OXX-OOX", false),
        ("OXX-OOO", false), ("OXXX---", false), ("OXXX--X", false), ("OXXX--O", false), ("OXXX-X-", false), ("OXXX-XX", false), ("OXXX-XO", true), ("OXXX-O-", false),
        ("OXXX-OX", false), ("OXXX-OO", false), ("OXXXX--", false), ("OXXXX-X", false), ("OXXXX-O", false), ("OXXXXX-", false), ("OXXXXXX", false), ("OXXXXXO", true),
        ("OXXXXO-", false), ("OXXXXOX", false), ("OXXXXOO", true), ("OXXXO--", false), ("OXXXO-X", false), ("OXXXO-O", false), ("OXXXOX-", false), ("OXXXOXX", false),
        ("OXXXOXO", true), ("OXXXOO-", false), ("OXXXOOX", false), ("OXXXOOO", true), ("OXXO---", false), ("OXXO--X", false), ("OXXO--O", false), ("OXXO-X-", false),
        ("OXXO-XX", false), ("OXXO-XO", true), ("OXXO-O-", false), ("OXXO-OX", false), ("OXXO-OO", false), ("OXXOX--", false), ("OXXOX-X", false), ("OXXOX-O", false),
        ("OXXOXX-", false), ("OXXOXXX", false), ("OXXOXXO", true), ("OXXOXO-", false), ("OXXOXOX", false), ("OXXOXOO", true), ("OXXOO--", false), ("OXXOO-X", false),
        ("OXXOO-O", false), ("OXXOOX-", false), ("OXXOOXX", false), ("OXXOOXO", true), ("OXXOOO-", false), ("OXXOOOX", false), ("OXXOOOO", true), ("OXO----", false),
        ("OXO---X", false), ("OXO---O", false), ("OXO--X-", false), ("OXO--XX", false), ("OXO--XO", true), ("OXO--O-", false), ("OXO--OX", false), ("OXO--OO", false),
        ("OXO-X--", false), ("OXO-X-X", false), ("OXO-X-O", false), ("OXO-XX-", false), ("OXO-XXX", false), ("OXO-XXO", true), ("OXO-XO-", false), ("OXO-XOX", false),
        ("OXO-XOO", true), ("OXO-O--", false), ("OXO-O-X", false), ("OXO-O-O", false), ("OXO-OX-", false), ("OXO-OXX", false), ("OXO-OXO", true), ("OXO-OO-", false),
        ("OXO-OOX", false), ("OXO-OOO", false), ("OXOX---", false), ("OXOX--X", false), ("OXOX--O", false), ("OXOX-X-", false), ("OXOX-XX", false), ("OXOX-XO", true),
        ("OXOX-O-", false), ("OXOX-OX", false), ("OXOX-OO", false), ("OXOXX--", false), ("OXOXX-X", false), ("OXOXX-O", false), ("OXOXXX-", false), ("OXOXXXX", false),
        ("OXOXXXO", true), ("OXOXXO-", false), ("OXOXXOX", false), ("OXOXXOO", true), ("OXOXO--", false), ("OXOXO-X", false), ("OXOXO-O", false), ("OXOXOX-", false),
        ("OXOXOXX", false), ("OXOXOXO", true), ("OXOXOO-", false), ("OXOXOOX", false), ("OXOXOOO", true), ("OXOO---", false), ("OXOO--X", false), ("OXOO--O", false),
        ("OXOO-X-", false), ("OXOO-XX", false), ("OXOO-XO", true), ("OXOO-O-", false), ("OXOO-OX", false), ("OXOO-OO", false), ("OXOOX--", false), ("OXOOX-X", false),
        ("OXOOX-O", false), ("OXOOXX-", false), ("OXOOXXX", false), ("OXOOXXO", true), ("OXOOXO-", false), ("OXOOXOX", false), ("OXOOXOO", true), ("OXOOO--", false),
        ("OXOOO-X", false), ("OXOOO-O", false), ("OXOOOX-", false), ("OXOOOXX", false), ("OXOOOXO", true), ("OXOOOO-", false), ("OXOOOOX", false), ("OXOOOOO", true),
        ("OO-----", false), ("OO----X", false), ("OO----O", false), ("OO---X-", false), ("OO---XX", false), ("OO---XO", true), ("OO---O-", false), ("OO---OX", false),
        ("OO---OO", false), ("OO--X--", false), ("OO--X-X", false), ("OO--X-O", false), ("OO--XX-", false), ("OO--XXX", false), ("OO--XXO", true), ("OO--XO-", false),
        ("OO--XOX", false), ("OO--XOO", true), ("OO--O--", false), ("OO--O-X", false), ("OO--O-O", false), ("OO--OX-", false), ("OO--OXX", false), ("OO--OXO", true),
        ("OO--OO-", false), ("OO--OOX", false), ("OO--OOO", false), ("OO-X---", false), ("OO-X--X", false), ("OO-X--O", false), ("OO-X-X-", false), ("OO-X-XX", false),
        ("OO-X-XO", true), ("OO-X-O-", false), ("OO-X-OX", false), ("OO-X-OO", false), ("OO-XX--", false), ("OO-XX-X", false), ("OO-XX-O", false), ("OO-XXX-", false),
        ("OO-XXXX", false), ("OO-XXXO", true), ("OO-XXO-", false), ("OO-XXOX", false), ("OO-XXOO", true), ("OO-XO--", false), ("OO-XO-X", false), ("OO-XO-O", false),
        ("OO-XOX-", false), ("OO-XOXX", false), ("OO-XOXO", true), ("OO-XOO-", false), ("OO-XOOX", false), ("OO-XOOO", true), ("OO-O---", false), ("OO-O--X", false),
        ("OO-O--O", false), ("OO-O-X-", false), ("OO-O-XX", false), ("OO-O-XO", true), ("OO-O-O-", false), ("OO-O-OX", false), ("OO-O-OO", false), ("OO-OX--", false),
        ("OO-OX-X", false), ("OO-OX-O", false), ("OO-OXX-", false), ("OO-OXXX", false), ("OO-OXXO", true), ("OO-OXO-", false), ("OO-OXOX", false), ("OO-OXOO", true),
        ("OO-OO--", false), ("OO-OO-X", false), ("OO-OO-O", false), ("OO-OOX-", false), ("OO-OOXX", false), ("OO-OOXO", true), ("OO-OOO-", false), ("OO-OOOX", false),
        ("OO-OOOO", false), ("OOX----", false), ("OOX---X", false), ("OOX---O", false), ("OOX--X-", false), ("OOX--XX", false), ("OOX--XO", true), ("OOX--O-", false),
        ("OOX--OX", false), ("OOX--OO", false), ("OOX-X--", false), ("OOX-X-X", false), ("OOX-X-O", false), ("OOX-XX-", false), ("OOX-XXX", false), ("OOX-XXO", true),
        ("OOX-XO-", false), ("OOX-XOX", false), ("OOX-XOO", true), ("OOX-O--", false), ("OOX-O-X", false), ("OOX-O-O", false), ("OOX-OX-", false), ("OOX-OXX", false),
        ("OOX-OXO", true), ("OOX-OO-", false), ("OOX-OOX", false), ("OOX-OOO", false), ("OOXX---", false), ("OOXX--X", false), ("OOXX--O", false), ("OOXX-X-", false),
        ("OOXX-XX", false), ("OOXX-XO", true), ("OOXX-O-", false), ("OOXX-OX", false), ("OOXX-OO", false), ("OOXXX--", false), ("OOXXX-X", false), ("OOXXX-O", false),
        ("OOXXXX-", false), ("OOXXXXX", false), ("OOXXXXO", true), ("OOXXXO-", false), ("OOXXXOX", false), ("OOXXXOO", true), ("OOXXO--", false), ("OOXXO-X", false),
        ("OOXXO-O", false), ("OOXXOX-", false), ("OOXXOXX", false), ("OOXXOXO", true), ("OOXXOO-", false), ("OOXXOOX", false), ("OOXXOOO", true), ("OOXO---", false),
        ("OOXO--X", false), ("OOXO--O", false), ("OOXO-X-", false), ("OOXO-XX", false), ("OOXO-XO", true), ("OOXO-O-", false), ("OOXO-OX", false), ("OOXO-OO", false),
        ("OOXOX--", false), ("OOXOX-X", false), ("OOXOX-O", false), ("OOXOXX-", false), ("OOXOXXX", false), ("OOXOXXO", true), ("OOXOXO-", false), ("OOXOXOX", false),
        ("OOXOXOO", true), ("OOXOO--", false), ("OOXOO-X", false), ("OOXOO-O", false), ("OOXOOX-", false), ("OOXOOXX", false), ("OOXOOXO", true), ("OOXOOO-", false),
        ("OOXOOOX", false), ("OOXOOOO", true), ("OOO----", false), ("OOO---X", false), ("OOO---O", false), ("OOO--X-", false), ("OOO--XX", false), ("OOO--XO", true),
        ("OOO--O-", false), ("OOO--OX", false), ("OOO--OO", false), ("OOO-X--", false), ("OOO-X-X", false), ("OOO-X-O", false), ("OOO-XX-", false), ("OOO-XXX", false),
        ("OOO-XXO", true), ("OOO-XO-", false), ("OOO-XOX", false), ("OOO-XOO", true), ("OOO-O--", false), ("OOO-O-X", false), ("OOO-O-O", false), ("OOO-OX-", false),
        ("OOO-OXX", false), ("OOO-OXO", true), ("OOO-OO-", false), ("OOO-OOX", false), ("OOO-OOO", false), ("OOOX---", false), ("OOOX--X", false), ("OOOX--O", false),
        ("OOOX-X-", false), ("OOOX-XX", false), ("OOOX-XO", true), ("OOOX-O-", false), ("OOOX-OX", false), ("OOOX-OO", false), ("OOOXX--", false), ("OOOXX-X", false),
        ("OOOXX-O", false), ("OOOXXX-", false), ("OOOXXXX", false), ("OOOXXXO", true), ("OOOXXO-", false), ("OOOXXOX", false), ("OOOXXOO", true), ("OOOXO--", false),
        ("OOOXO-X", false), ("OOOXO-O", false), ("OOOXOX-", false), ("OOOXOXX", false), ("OOOXOXO", true), ("OOOXOO-", false), ("OOOXOOX", false), ("OOOXOOO", true),
        ("OOOO---", false), ("OOOO--X", false), ("OOOO--O", false), ("OOOO-X-", false), ("OOOO-XX", false), ("OOOO-XO", true), ("OOOO-O-", false), ("OOOO-OX", false),
        ("OOOO-OO", false), ("OOOOX--", false), ("OOOOX-X", false), ("OOOOX-O", false), ("OOOOXX-", false), ("OOOOXXX", false), ("OOOOXXO", true), ("OOOOXO-", false),
        ("OOOOXOX", false), ("OOOOXOO", true), ("OOOOO--", false), ("OOOOO-X", false), ("OOOOO-O", false), ("OOOOOX-", false), ("OOOOOXX", false), ("OOOOOXO", true),
        ("OOOOOO-", false), ("OOOOOOX", false), ("OOOOOOO", false),
    ];
    for (txt, res) in TBLCHKREV_TEST {
        // println!("{txt}:{res}");
        let obf =
            txt.chars().map(|ch| {
                String::from("--") + &ch.to_string() + "-----"
            }).collect::<Vec<String>>().join("") + "-------- X";

        let ban = BitBoard::from_obf(&obf).unwrap();
        let result = ban.checkreverse(BitBoard::index(2, 7));
        if result != res {ban.put();}
        assert_eq!(result, res);
        let result = ban.rotate180().checkreverse(BitBoard::index(5, 0));
        if result != res {ban.rotate180().put();}
        assert_eq!(result, res);
    }
}

#[test]
fn test_progress() {
    let tbl_prgs = [
        // 4~23
        ("8/8/8/3aA3/3Aa3/8/8/8 b", 0), ("8/8/8/3aA3/3Ab2/8/8/8 b", 0),
        ("8/8/8/3aA3/3Ac1/8/8/8 b", 0), ("8/8/8/3aA3/3Ad/8/8/8 b",  0),
        ("8/8/8/3aA3/2Bd/8/8/8 b",  0), ("8/8/8/3aA3/1Cd/8/8/8 b",  0),
        ("8/8/8/3aA3/Dd/8/8/8 b",   0), ("8/8/8/3aB2/Dd/8/8/8 b",   0),
        ("8/8/8/3aC1/Dd/8/8/8 b",   0), ("8/8/8/3aD/Dd/8/8/8 b",    0),
        ("8/8/8/2bD/Dd/8/8/8 b",    0), ("8/8/8/1cD/Dd/8/8/8 b",    0),
        ("8/8/8/dD/Dd/8/8/8 b",     0), ("8/8/7a/dD/Dd/8/8/8 b",    0),
        ("8/8/6b/dD/Dd/8/8/8 b",    0), ("8/8/5c/dD/Dd/8/8/8 b",    0),
        ("8/8/4d/dD/Dd/8/8/8 b",    0), ("8/8/3e/dD/Dd/8/8/8 b",    0),
        ("8/8/2f/dD/Dd/8/8/8 b",    0), ("8/8/1g/dD/Dd/8/8/8 b",    0),
        // 24~43
        ("8/8/h/dD/Dd/8/8/8 b",     1), ("8/A7/h/dD/Dd/8/8/8 b",    1),
        ("8/B6/h/dD/Dd/8/8/8 b",    1), ("8/C5/h/dD/Dd/8/8/8 b",    1),
        ("8/D4/h/dD/Dd/8/8/8 b",    1), ("8/E3/h/dD/Dd/8/8/8 b",    1),
        ("8/F2/h/dD/Dd/8/8/8 b",    1), ("8/G1/h/dD/Dd/8/8/8 b",    1),
        ("8/H/h/dD/Dd/8/8/8 b",     1), ("a7/H/h/dD/Dd/8/8/8 b",    1),
        ("b6/H/h/dD/Dd/8/8/8 b",    1), ("c5/H/h/dD/Dd/8/8/8 b",    1),
        ("d4/H/h/dD/Dd/8/8/8 b",    1), ("e3/H/h/dD/Dd/8/8/8 b",    1),
        ("f2/H/h/dD/Dd/8/8/8 b",    1), ("g1/H/h/dD/Dd/8/8/8 b",    1),
        ("h/H/h/dD/Dd/8/8/8 b",     1), ("h/H/h/dD/Dd/7A/8/8 b",    1),
        ("h/H/h/dD/Dd/6B/8/8 b",    1), ("h/H/h/dD/Dd/5C/8/8 b",    1),
        // 44~63
        ("h/H/h/dD/Dd/4D/8/8 b",    2), ("h/H/h/dD/Dd/3E/8/8 b",    2),
        ("h/H/h/dD/Dd/2F/8/8 b",    2), ("h/H/h/dD/Dd/1G/8/8 b",    2),
        ("h/H/h/dD/Dd/H/8/8 b",     2), ("h/H/h/dD/Dd/H/7a/8 b",    2),
        ("h/H/h/dD/Dd/H/6b/8 b",    2), ("h/H/h/dD/Dd/H/5c/8 b",    2),
        ("h/H/h/dD/Dd/H/4d/8 b",    2), ("h/H/h/dD/Dd/H/3e/8 b",    2),
        ("h/H/h/dD/Dd/H/2f/8 b",    2), ("h/H/h/dD/Dd/H/1g/8 b",    2),
        ("h/H/h/dD/Dd/H/h/8 b",     2), ("h/H/h/dD/Dd/H/h/7A b",    2),
        ("h/H/h/dD/Dd/H/h/6B b",    2), ("h/H/h/dD/Dd/H/h/5C b",    2),
        ("h/H/h/dD/Dd/H/h/4D b",    2), ("h/H/h/dD/Dd/H/h/3E b",    2),
        ("h/H/h/dD/Dd/H/h/2F b",    2), ("h/H/h/dD/Dd/H/h/1G b",    2),
        // 63
        ("h/H/h/dD/Dd/H/h/H b",     2),
    ];
    for (rfen, prgs) in tbl_prgs {
        let ban = BitBoard::from(rfen).unwrap();
        if ban.progress() != prgs {println!("progress({rfen})");}
        assert_eq!(ban.progress(), prgs);
        assert!(ban.is_progress(prgs));
    }
}
