# example:
#  $ ruby summaryduel.rb < duelresult.txt

TBLVIRIDIS = %W[
 68,1,84     68,2,86   69,4,87    69,5,89    70,7,90    70,8,92    70,10,93   70,11,94   71,13,96   71,14,97   71,16,99   71,17,100  71,19,101  72,20,103  72,22,104 72,23,105
 72,24,106 72,26,108  72,27,109   72,28,110  72,29,111  72,31,112  72,32,113  72,33,115  72,35,116  72,36,117  72,37,118  72,38,119  72,40,120  72,41,121  71,42,122 71,44,122
 71,45,123 71,46,124  71,47,125   70,48,126  70,50,126  70,51,127  70,52,128  69,53,129  69,55,129  69,56,130  68,57,131  68,58,131  68,59,132  67,61,132  67,62,133 66,63,133
 66,64,134 66,65,134  65,66,135   65,68,135  64,69,136  64,70,136  63,71,136  63,72,137  62,73,137  62,74,137  62,76,138  61,77,138  61,78,138  60,79,138  60,80,139 59,81,139
 59,82,139 58,83,139  58,84,140   57,85,140  57,86,140  56,88,140  56,89,140  55,90,140  55,91,141  54,92,141  54,93,141  53,94,141  53,95,141  52,96,141  52,97,141 51,98,141
 51,99,141 50,100,142 50,101,142 49,102,142 49,103,142 49,104,142 48,105,142 48,106,142 47,107,142 47,108,142 46,109,142 46,110,142 46,111,142 45,112,142 45,113,142 44,113,142
44,114,142 44,115,142 43,116,142 43,117,142 42,118,142 42,119,142 42,120,142 41,121,142 41,122,142 41,123,142 40,124,142 40,125,142 39,126,142 39,127,142 39,128,142 38,129,142
38,130,142 38,130,142 37,131,142 37,132,142 37,133,142 36,134,142 36,135,142 35,136,142 35,137,142 35,138,141 34,139,141 34,140,141 34,141,141 33,142,141 33,143,141 33,144,141
33,145,140 32,146,140 32,146,140 32,147,140 31,148,140 31,149,139 31,150,139 31,151,139 31,152,139 31,153,138 31,154,138 30,155,138 30,156,137 30,157,137 31,158,137 31,159,136
31,160,136 31,161,136 31,161,135 31,162,135 32,163,134 32,164,134 33,165,133 33,166,133 34,167,133 34,168,132 35,169,131 36,170,131 37,171,130 37,172,130 38,173,129 39,173,129
40,174,128 41,175,127 42,176,127 44,177,126 45,178,125 46,179,124 47,180,124 49,181,123 50,182,122 52,182,121 53,183,121 55,184,120 56,185,119 58,186,118 59,187,117 61,188,116
63,188,115 64,189,114 66,190,113 68,191,112 70,192,111 72,193,110 74,193,109 76,194,108 78,195,107 80,196,106 82,197,105 84,197,104 86,198,103 88,199,101 90,200,100 92,200,99
94,201,98  96,202,96  99,203,95  101,203,94 103,204,92 105,205,91 108,205,90 110,206,88 112,207,87 115,208,86 117,208,84 119,209,83 122,209,81 124,210,80 127,211,78 129,211,77
132,212,75 134,213,73 137,213,72 139,214,70 142,214,69 144,215,67 147,215,65 149,216,64 152,216,62 155,217,60 157,217,59 160,218,57 162,218,55 165,219,54 168,219,52 170,220,50
173,220,48 176,221,47 178,221,45 181,222,43 184,222,41 186,222,40 189,223,38 192,223,37 194,223,35 197,224,33 200,224,32 202,225,31 205,225,29 208,225,28 210,226,27 213,226,26
216,226,25 218,227,25 221,227,24 223,227,24 226,228,24 229,228,25 231,228,25 234,229,26 236,229,27 239,229,28 241,229,29 244,230,30 246,230,32 248,230,33 251,231,35 253,231,37
].freeze

TBLCOOL2WARM = %W[
  59,76,192   60,78,194   61,80,195  62,81,197    63,83,199   64,85,200   66,87,202   67,88,203   68,90,204   69,92,206   70,94,207   72,95,209   73,97,210   74,99,212  75,100,213  76,102,214
 78,104,216  79,106,217  80,107,218  81,109,219  83,111,221  84,112,222  85,114,223  86,116,224  88,117,226  89,119,227  90,120,228  91,122,229  93,124,230  94,125,231  95,127,232  97,129,233
 98,130,234  99,132,235 101,133,236 102,135,237 103,136,238 105,138,239 106,140,240 107,141,240 109,143,241 110,144,242 111,146,243 113,147,244 114,149,244 115,150,245 117,152,246 118,153,246
119,154,247 121,156,248 122,157,248 123,159,249 125,160,249 126,162,250 128,163,250 129,164,251 130,166,251 132,167,252 133,168,252 134,170,252 136,171,253 137,172,253 139,174,253 140,175,254
141,176,254 143,177,254 144,178,254 146,180,254 147,181,255 148,182,255 150,183,255 151,184,255 153,186,255 154,187,255 155,188,255 157,189,255 158,190,255 159,191,255 161,192,255 162,193,255
163,194,254 165,195,254 166,196,254 168,197,254 169,198,254 170,199,253 172,200,253 173,201,253 174,201,252 176,202,252 177,203,252 178,204,251 180,205,251 181,206,250 182,206,250 183,207,249
185,208,249 186,209,248 187,209,248 189,210,247 190,211,246 191,211,246 192,212,245 193,212,244 195,213,244 196,214,243 197,214,242 198,215,241 200,215,241 201,216,240 202,216,239 203,216,238
204,217,237 205,217,236 206,218,235 208,218,234 209,218,233 210,219,232 211,219,231 212,219,230 213,219,229 214,220,228 215,220,227 216,220,226 217,220,225 218,220,224 219,221,222 220,221,221
221,220,220 222,220,219 223,220,217 225,219,216 226,218,214 227,218,213 228,217,211 229,217,210 229,216,209 230,216,207 231,215,206 232,214,204 233,214,203 234,213,201 235,212,200 235,211,198
236,211,197 237,210,195 238,209,194 238,208,192 239,207,191 239,206,189 240,206,187 241,205,186 241,204,184 242,203,183 242,202,181 243,201,180 243,200,178 244,199,177 244,198,175 244,197,173
245,196,172 245,195,170 245,193,169 246,192,167 246,191,166 246,190,164 246,189,162 247,188,161 247,186,159 247,185,158 247,184,156 247,183,155 247,181,153 247,180,151 247,179,150 247,177,148
247,176,147 247,175,145 247,173,144 247,172,142 247,171,140 247,169,139 247,168,137 247,166,136 246,165,134 246,163,133 246,162,131 246,160,129 245,159,128 245,157,126 245,156,125 244,154,123
244,153,122 244,151,120 243,149,119 243,148,117 242,146,116 242,144,114 241,143,113 241,141,111 240,139,110 240,138,108 239,136,107 238,134,105 238,133,104 237,131,102 237,129,101 236,127,99
235,125,98  234,124,96  234,122,95  233,120,93  232,118,92  231,116,91  230,114,89  229,112,88  229,111,86  228,109,85  227,107,84  226,105,82  225,103,81  224,101,79  223,99,78   222,97,77
221,95,75   220,93,74   219,91,73   218,89,71   216,86,70   215,84,69   214,82,68   213,80,66   212,78,65   211,76,64   209,73,62   208,71,61   207,69,60   206,67,59   204,64,57   203,62,56
202,59,55   200,57,54   199,54,53   198,52,52   196,49,50   195,46,49   193,43,48   192,40,47   191,37,46   189,34,45   188,30,44   186,26,43   185,22,41   183,17,40   182,11,39   180,4,38
].freeze

# blue - white - red
def cool2warm(i)
  return TBLCOOL2WARM[0] if (i < 0)
  return TBLCOOL2WARM[255] if (i > 255)
  TBLCOOL2WARM[i]
end

# purple - yellow
def viridis(i)
  return TBLVIRIDIS[0] if (i < 0) 
  return TBLVIRIDIS[255] if (i > 255)
  TBLVIRIDIS[i]
end

def readrfen(rfen)
  stones = 0
  blanks = 0
  rfen.each_char do |c|
    idx = c.index("12345678")
    if idx
      blanks += idx
      next
    end

    idx = c.index("ABCDEFGH")
    if idx
      stones += idx
      next
    end
    idx = c.index("abcdefgh")
    if idx
      stones += idx
      next
    end
    break if c == " "
  end

  return -1 if stones + blanks != 64
  stones
end

def val2color(val, cvtsym, ch)
  idx = ((val + 64) / 128.0 * 255.999).to_i
  color = method(cvtsym).call(idx)
  return "<span style='color:rgb(" + color + ")'>" + ch + "</span>"
end

HISTRANGE = %W[
  -64~-55 -54~-45 -44~-35 -34~-25 -24~-15 -14~-5 -4~+4
   +5~+14 +15~+24 +25~+34 +35~+44 +45~+54 +55~+64 END
].freeze

def genhistogram(histogram)
  histogram10 = Array.new(13, 0)
  n = 0
  sum = 0
  sqsum = 0
  mode = 0
  modefreq = 0
  for i in 0..64
    val = histogram[i]
    idx = (i * 0.1).truncate
    histogram10[idx] += val
    n += val
    sum += val * (i - 64)
    sqsum += val * (i - 64) * (i - 64)
    if modefreq < val
      modefreq = val
      mode = i - 64
    end
  end
  for i in 65..128
    val = histogram[i]
    idx = ((i + 1) * 0.1).to_i
    histogram10[idx] += val
    n += val
    sum += val * (i - 64)
    sqsum += val * (i - 64) * (i - 64)
    if modefreq < val
      modefreq = val
      mode = i - 64
    end
  end
  accum = 0
  median = 0
  half = n * 0.5
  for i in 0..128
    accum += histogram[i]
    if accum >= half
      median = i - 64
      break;
    end
  end
  res = "<div class=histgraph>"
  # res =  + "</div>"
  hmax = 1
  for i in 0..12
    hmax = histogram10[i] if hmax < histogram10[i]
  end
  for i in 0..12
    mag = (10.0 * histogram10[i] / hmax).ceil
    res += "<div class='hbin'>" + ("<br>" * (10 - mag)) + ("▲<br>" * mag)
    res += "<small>" + HISTRANGE[i] + "<br>#{histogram10[i]}</small></div>"
  end
  res += "</div>"

  res += "<textarea id=histogram cols=40>stats\n"
  avg = sum / n.to_f
  stdev = Math.sqrt(sqsum / n - avg * avg).round(2)
  res += "N, #{n}, avg, #{avg.round(2)}, stdev,#{stdev}, median, #{median}, mode, #{mode}, #{modefreq}\n"
  res += "score histogram\n"
  for i in 0..128
    res += "#{(i - 64)}, #{histogram[i]}\n"
  end
  res += "</textarea>"

  res
end

def read(lines)
  black = Array.new(60, "0")
  white = Array.new(60, "0")
  histogram = Array.new(64 * 2 + 1, 0)
  idx = 0
  res = ""
  game = ""
  total = ""
  sente = ""
  gote = ""
  ev1 = ""
  ev2 = ""
  lines.each {|line|
    if line.start_with?("val:")
      term = line.split(' ')
      val = term[0][4..-1].to_i
      turn = term[3][0]
      if turn == "@"
        # black[idx] = val
        game += val2color(val, :cool2warm, "■")
        # game += val2color(val, :viridis, "■")
      else
        # white[idx] = val
        game += val2color(val, :cool2warm, "★")
        # game += val2color(val, :viridis, "★")
      end
      # res += val + "\n"
      next
    end

    next if line =~ /^\d+ /
    next if line[0] == '|'

    if line =~ /won/
      score = line.split(' ')[2]
      # res += "<span class=game>#{game}#{score}</span><br>"
      res += "<div class=game>#{game}#{score}</div>"
      histogram[64 + score.to_i] += 1
      # game += line
      # res += line
      game = ""
      next
    end
    if line =~ /DRAW/
      # res += "<span class=game>#{game}#{line}</span><br>"
      res += "<div class=game>#{game}#{line}</div>"
      histogram[64] += 1
      # game += line
      # res += line
      game = ""
      next
    end
    next if line[0] == "@" || line[0] == "["
    if line.start_with?("total")
      total = line
    end
    if line.start_with?("ev1 @")
      m = /win,(\d+),draw,(\d+),lose,(\d+)/.match(line)
      sente = "#{m[1]} / #{m[2]} / #{m[3]}"
      next
    end
    if line.start_with?("ev1 [")
      m = /win,(\d+),draw,(\d+),lose,(\d+)/.match(line)
      gote = "#{m[1]} / #{m[2]} / #{m[3]}"
      next
    end
    if line.start_with?("ev1:")
      ev1 = line.chomp
      next
    end
    if line.start_with?("ev2")
      ev2 = line.chomp
      next
    end

    stones = readrfen(line)
    idx = stones - 4 if stones >= 4
  }
  "<p>#{ev1}</p><p>#{ev2}</p><div><p>#{total}</p><p>Black:#{sente}, White:#{gote}</p></div>" \
  "#{genhistogram(histogram)}<div>each game<button onclick='showgame();'>vvv</button><div id=games style='display:none;'>#{res}</div></div>"
end

TITLE = "duel result"
puts <<-EOT
<html>
<head>
<title>#{TITLE}</title>
<style>
.game {border:1px solid black; margin:1px 0; padding:0;}
.histgraph {display:flex; border:1px solid black;}
.hbin {text-align:center; vertical-align:bottom; margin:0 2px;}
small{font-size:8pt;}
</style>
<script>
function showgame() {
 const elem = document.getElementById("games");
 if (elem.style.display == "block") {
  elem.style.display = "none";
 } else {
  elem.style.display = "block";
 }
}
</script>
</head><body><h1>duel summary</h1>#{read(readlines)}<body></html>
EOT
